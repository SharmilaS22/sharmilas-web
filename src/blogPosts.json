{
    "posts": [
        {
            "title": "Publish/Subscribe Model with RabbitMQ in node.js",
            "pubDate": "2023-02-18 16:55:03",
            "link": "https://blog.devops.dev/publish-subscribe-model-with-rabbitmq-in-node-js-1be74234df60?source=rss-5da727287624------2",
            "guid": "https://medium.com/p/1be74234df60",
            "author": "Sharmila S",
            "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*9yzscIIvCo6cR-qfrMhQDw.gif",
            "description": "\n<p>In this article, we will be learning how to create a publish/subscribe queue model with the message broker RabbitMQ in node.js.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*9yzscIIvCo6cR-qfrMhQDw.gif\"></figure><p>RabbitMQ is an open-source message broker software.</p>\n<blockquote><em>Message Broker is the intermediary agent between provider and client(s) that makes sure the message is not lost.<br>Some alternatives to RabbitMQ: Apache Kafka, Amazon Kinesis etc.</em></blockquote>\n<p>RabbitMQ implements AMQP (Advanced Message Queuing Protocol). AMQP is a protocol that helps in communication between services using messages.</p>\n<p>In this article, we will be implementing a publish/subscribe model. This model handles the scenario of sending a common message to all the servers.</p>\n<p>We are going to implement this model with a provider app and two client apps.</p>\n<p>The provider will send out a message to the queue. From the queue, the message is transmitted to all the clients.</p>\n<blockquote>To achieve this model, we will be using an exchange type called ‘fanout’</blockquote>\n<p>Let’s understand what an exchange is.</p>\n<p><em>An exchange receives messages from the Provider and sends them to the desired queues.</em></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*si_JOJsvdCDYjYAaqlr8VA.jpeg\"></figure><p>The exchange is responsible for making sure the messages are sent to the right queue.</p>\n<p>Fanout exchange is one of the <em>5 types</em> of exchanges in RabbitMQ. To learn about the other exchange types, visit the below link.</p>\n<p><a href=\"https://blog.devops.dev/rabbitmq-exchange-types-explained-5fd9086595f5\">RabbitMQ Exchange Types Explained</a></p>\n<h4>Fanout exchange:</h4>\n<p>In Fanout exchange, we transmit the messages to all the queues connected.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*18sL8UKSpSMZJD9cErqlpg.gif\"><figcaption>Fanout exchange example</figcaption></figure><p>In this article, we will be implementing the RabbitMQ using node.js framework. If you want to get started with node.js or need a quick refresh, check out the below article.</p>\n<p><a href=\"https://medium.com/featurepreneur/develop-a-backend-server-for-your-application-using-express-29deeae40ed1\">Develop a Backend Server for your application using Express</a></p>\n<p>If you are new to RabbitMQ, I recommend the article below to get started with a simple application.</p>\n<p><a href=\"https://sharmilas.medium.com/get-started-with-rabbitmq-in-node-js-1adb18d019d0\">Get Started with RabbitMQ in Node.js</a></p>\n<h4>What are we going to create?</h4>\n<ul>\n<li>A publisher app in node.js.</li>\n<li>An exchange and two queues.</li>\n<li>Two client apps (<em>client1</em> and <em>client2</em>). Both the client apps receive messages from their respective queue.</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*wFssVMnGDlqpM2hY7u4nkg.jpeg\"></figure><h4>Tools needed:</h4>\n<ol>\n<li>Node.js and NPM</li>\n<li>RabbitMQ</li>\n</ol>\n<p>If you don't have node.js installed in your system already, install it from <a href=\"https://nodejs.org/en/download/\">here</a>, based on your OS.</p>\n<p>If RabbitMQ is not installed in your system, install it from <a href=\"https://www.rabbitmq.com/download.html\">here</a> based on your platform or you can use <a href=\"https://registry.hub.docker.com/_/rabbitmq/\">this</a> docker image.</p>\n<p>I will use the <strong>RabbitMQ docker image </strong>to run the RabbitMQ server locally. If you are familiar with using Docker, you can run the following command to run the RabbitMQ server in your system.</p>\n<pre>docker run -it --rm --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3.9-management</pre>\n<p>The server is running at port 5672 and it is ready to connect.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Zp8kSas23XqCePI5y_uzNQ.png\"><figcaption>Server running</figcaption></figure><p>Our folder structure will look like this:</p>\n<pre><strong>\\publish-subscribe-demo</strong><br>  |-- <strong>\\publisher</strong><br>  |-- <strong>\\client1</strong><br>  |-- <strong>\\client2</strong></pre>\n<h3>Publisher</h3>\n<p>Under the project folder, create a new folder for the <em>publisher</em> server and set up the project.</p>\n<pre>mkdir publisher<br>cd publisher<br>npm init<br>npm i express amqplib</pre>\n<blockquote>\n<em>express-&gt; to create a node.js application.<br></em><em>amqplib-&gt; to create a message broker.</em>\n</blockquote>\n<p>Create a file called index.js and add the following.</p>\n<a href=\"https://medium.com/media/d0270de72e41219de3dbbbaff5c4572b/href\">https://medium.com/media/d0270de72e41219de3dbbbaff5c4572b/href</a><h4>Code explanation:</h4>\n<p><em>line 1- 6, 54: </em>We are creating a basic express app. Our publisher app is running on port <strong>4000</strong>.</p>\n<blockquote>(<a href=\"https://medium.com/featurepreneur/develop-a-backend-server-for-your-application-using-express-29deeae40ed1\">This article on Node.js</a> will help you get started if you are not familiar with node.)</blockquote>\n<pre>const express = require(\"express\")<br><br>const app = express()<br>const PORT = process.env.PORT || 4000; <br><br>app.use(express.json()) <br><br>//...<br>//...<br>//...<br><br>app.listen(PORT, () =&gt; console.log(\"Server listening at port \" + PORT))</pre>\n<p><em>line 8:</em> Importing the <em>amqplib </em>library. Using this, we will communicate with the RabbitMQ server.</p>\n<pre>const amqp = require(\"amqplib\");</pre>\n<h4>Connection code:</h4>\n<p><em>line 9–30: </em>We are wrapping the connection code in a function called ‘connectQueue()’. Inside the function, we will create a connection, channel and exchange.</p>\n<blockquote><em>amqp.connect() is used to connect to the RabbitMQ server. The URL of the server is passed (‘amqp://localhost:5672’) as a parameter.</em></blockquote>\n<blockquote>\n<em>After connecting to the RabbitMQ server, we are creating a channel using </em><em>createChannel() .</em>\n</blockquote>\n<p>channel.assertExchange() checks for an exchange with the given properties. If the exchange doesn’t exist, a new exchange will be created with the values passed.</p>\n<p>We are naming our exchange ‘test-exchange’. As we discussed earlier the exchange type would be ‘fanout’. You can provide any name for the exchange and queues.</p>\n<pre>var channel, connection;<br><br>const exchange_name = 'test-exchange';<br>const exchange_type = 'fanout';<br>// const message       = \"Hello World!\";<br><br>connectQueue() // call connectQueue function<br>async function connectQueue() {<br>    try {<br><br>        connection = await amqp.connect(\"amqp://localhost:5672\");<br>        channel = await connection.createChannel()<br><br>        // https://amqp-node.github.io/amqplib/channel_api.html#channel_assertExchange<br>        await channel.assertExchange(exchange_name, exchange_type, {<br>            durable: false<br>        })<br><br>    } catch (error) {<br>        console.log(error)<br>    }<br>}</pre>\n<blockquote>(If you are unfamiliar with async/await and other js concepts, click <a href=\"https://medium.com/featurepreneur/6-must-know-javascript-es6-concepts-6bbf1b448228\">here</a> to get a quick overview of some of the must-know javascript concepts)</blockquote>\n<p><em>line: 32–38: </em>Let’s write a function that publishes the messages to the queue.</p>\n<p>We are defining a function called sendMessageToQueue which will take a message as a parameter. In this function, we send the message to the queue using channel.publish(). In the publish() method, we pass the names of the exchange and the queue along with the message to be sent.</p>\n<pre>const sendMessageToQueue = async (message) =&gt; {<br>    const queue_name = '';<br>    await channel.publish(<br>        exchange_name,<br>        queue_name, <br>        Buffer.from(message)<br>    );<br>}</pre>\n<p><em>Line 40–53:</em> Finally, let’s create a simple API with the GET method. When this API is invoked, we will use the function ‘sendMessageToQueue’ to send the message (here, ‘Hello World!’) to the queue.</p>\n<pre>app.get(\"/send-msg\", (req, res) =&gt; {<br>    const message = \"Hello World!\";<br><br>    sendMessageToQueue(message)<br><br>    console.log(\"Message sent to the exchange\");<br><br>    // await channel.close();<br>    // await connection.close();<br><br>    res.send(\"Message Sent\");<br><br>})</pre>\n<p>Let’s create <strong>two</strong> client servers to receive messages.</p>\n<h3>Client 1</h3>\n<p>For client1, we’ll create a simple node application that will connect to and receive messages from the queue <em>‘test-queue1’.</em></p>\n<p>Create another folder called ‘client1’ at the root level. Initialise npm and install necessary modules.</p>\n<pre>mkdir client1<br>cd client1<br>npm init<br>npm i express amqplib</pre>\n<p>Create a file called ‘index.js’ and add the following.</p>\n<a href=\"https://medium.com/media/866a5326248294fc1f5da24663003b71/href\">https://medium.com/media/866a5326248294fc1f5da24663003b71/href</a><h4>Code explanation</h4>\n<p><em>Line 1–5 and 51: </em>First, we’ll set up the express app and make it listen to port <strong>5001</strong>.</p>\n<pre>const express = require(\"express\");<br>const app = express();<br>const PORT = process.env.PORT || 5001; <br>app.use(express.json()); <br><br>// RabbitMQ code<br><br>app.listen(PORT, () =&gt; console.log(\"Server running at port \" + PORT));</pre>\n<p><em>Line 7–24:</em> Then, we will connect to the RabbitMQ server, and create a new channel. (as we did in the <em>publisher</em> app).</p>\n<pre>const amqp = require(\"amqplib\");<br>var channel, connection;<br><br>const exchange_name = \"test-exchange\";<br>const exchange_type = \"fanout\";<br>const queue_name    = 'test-queue1';<br><br>connectToRabbitMQ(); <br>async function connectToRabbitMQ() {<br>  try {<br>    connection = await amqp.connect(\"amqp://localhost:5672\");<br>    channel = await connection.createChannel();<br><br>    connectToQueue()<br><br>  } catch (error) {<br>    console.log(error);<br>  }<br>}</pre>\n<p><em>line 26–49: </em>Now the part left to do is connect to the queue and consume the messages from the queue. We will create a function called ‘connectToQueue()’ to handle this.</p>\n<pre> async function connectToQueue() {<br><br>  await channel.assertExchange(exchange_name, exchange_type, {<br>    durable: false,<br>  });<br><br>  const q = await channel.assertQueue(queue_name, { exclusive: true });<br><br>  console.log(\"Waiting for messages....\");<br><br>  // binding the queue<br>  const binding_key = \"\";<br>  channel.bindQueue(q.queue, exchange_name, binding_key);<br><br>  console.log(\"consuming messages from queue: \", q.queue);<br>  channel.consume(<br>    q.queue,<br>    (msg) =&gt; {<br>      if (msg.content)<br>        console.log(\"Received message: \", msg.content.toString());<br>    },<br>    { noAck: true }<br>  );<br>}</pre>\n<p>Let’s connect to the exchange. (name — ‘test-exchange’, type — ‘fanout’). channel.assertExchange() is used to connect to the exchange.</p>\n<pre>await channel.assertExchange(exchange_name, exchange_type, {<br>    durable: false,<br>  });</pre>\n<p>Now, let's connect to the queue to receive the messages. The method channel.assertQueue() could be used to connect to the queue.</p>\n<pre>const q = await channel.assertQueue(queue_name, { exclusive: true });</pre>\n<p>We have to bind our new queue to the exchange with a binding key. Here, we set an empty binding key since we want to receive all the messages from the queue without any restrictions.</p>\n<pre>// binding the queue<br>  const binding_key = \"\";<br>  channel.bindQueue(q.queue, exchange_name, binding_key);</pre>\n<p>Let’s consume the messages from the queue using channel.consume() .</p>\n<p>consume() method takes the queue's name as a parameter and returns the message from the queue as a callback. The channel.ack() function is used to acknowledge that the particular message has been received by this app.</p>\n<pre>channel.consume(<br>    q.queue,<br>    (msg) =&gt; {<br>      if (msg.content)<br>        console.log(\"Received message: \", msg.content.toString());<br>        channel.ack(msg);<br>    }<br>  );</pre>\n<h3>Client 2</h3>\n<p>Now let’s create another app which will also receive the messages from the exchange.</p>\n<p>We can just make a copy of the client-1 and make a few changes.</p>\n<p><strong>Steps:</strong></p>\n<ul>\n<li>Copy the client1 folder and rename the folder to ‘client2’.</li>\n<li>Open the ‘index.js’ file of the <em>client2</em> app in an editor.</li>\n<li>Change the value of Port on line 3 from 5001 to 5002. (This app will run on port 5002 and connects to the RabbitMQ Server.)</li>\n</ul>\n<p><em>From:</em></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*jeu_e87zFhcuTyJwNNZbmA.png\"></figure><p><em>To:</em></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Oyn3DVaIrSKwls2vt3JZIA.png\"></figure><h3>Testing</h3>\n<p>It’s time to test our code.</p>\n<p>Make sure the RabbitMQ server is running.</p>\n<p>In the terminal, open the publisher, client1 and client2 folders in different tabs.</p>\n<p>Run the apps using the command node index.js in publisher, client1 and client2.</p>\n<pre>node index.js</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*rtDFZSNTtrpiQ2tXPOokjA.png\"></figure><p>Now when the apps are connected to the RabbitMQ server without errors, go to your browser and hit <a href=\"http://localhost:4000/send-msg\">http://localhost:4000/send-msg</a>. The publisher app will send a message to the exchange when it sees this request. The message will be broadcasted to the queue. From the queue, the message will be received by our client apps.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Ax6eTWoJSH2BZESiamnedw.png\"></figure><p>We can notice that the message has been sent from the publisher by looking at the app logs.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*N8c2LllEQaO-qWjZiKEMPw.png\"><figcaption>Publisher app logs</figcaption></figure><p>We can confirm the message has been received by both the client apps from their logs.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*zc9HB4DP7htf-UgPOyI2Cw.png\"><figcaption>Client1 (left) and Client2 app logs</figcaption></figure><p>Happy learning!</p>\n<p>Github repo: <a href=\"https://github.com/SharmilaS22/medium-rabbitmq-publish\">https://github.com/SharmilaS22/medium-rabbitmq-publish</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=1be74234df60\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://blog.devops.dev/publish-subscribe-model-with-rabbitmq-in-node-js-1be74234df60\">Publish/Subscribe Model with RabbitMQ in node.js</a> was originally published in <a href=\"https://blog.devops.dev/\">DevOps.dev</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "content": "\n<p>In this article, we will be learning how to create a publish/subscribe queue model with the message broker RabbitMQ in node.js.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*9yzscIIvCo6cR-qfrMhQDw.gif\"></figure><p>RabbitMQ is an open-source message broker software.</p>\n<blockquote><em>Message Broker is the intermediary agent between provider and client(s) that makes sure the message is not lost.<br>Some alternatives to RabbitMQ: Apache Kafka, Amazon Kinesis etc.</em></blockquote>\n<p>RabbitMQ implements AMQP (Advanced Message Queuing Protocol). AMQP is a protocol that helps in communication between services using messages.</p>\n<p>In this article, we will be implementing a publish/subscribe model. This model handles the scenario of sending a common message to all the servers.</p>\n<p>We are going to implement this model with a provider app and two client apps.</p>\n<p>The provider will send out a message to the queue. From the queue, the message is transmitted to all the clients.</p>\n<blockquote>To achieve this model, we will be using an exchange type called ‘fanout’</blockquote>\n<p>Let’s understand what an exchange is.</p>\n<p><em>An exchange receives messages from the Provider and sends them to the desired queues.</em></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*si_JOJsvdCDYjYAaqlr8VA.jpeg\"></figure><p>The exchange is responsible for making sure the messages are sent to the right queue.</p>\n<p>Fanout exchange is one of the <em>5 types</em> of exchanges in RabbitMQ. To learn about the other exchange types, visit the below link.</p>\n<p><a href=\"https://blog.devops.dev/rabbitmq-exchange-types-explained-5fd9086595f5\">RabbitMQ Exchange Types Explained</a></p>\n<h4>Fanout exchange:</h4>\n<p>In Fanout exchange, we transmit the messages to all the queues connected.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*18sL8UKSpSMZJD9cErqlpg.gif\"><figcaption>Fanout exchange example</figcaption></figure><p>In this article, we will be implementing the RabbitMQ using node.js framework. If you want to get started with node.js or need a quick refresh, check out the below article.</p>\n<p><a href=\"https://medium.com/featurepreneur/develop-a-backend-server-for-your-application-using-express-29deeae40ed1\">Develop a Backend Server for your application using Express</a></p>\n<p>If you are new to RabbitMQ, I recommend the article below to get started with a simple application.</p>\n<p><a href=\"https://sharmilas.medium.com/get-started-with-rabbitmq-in-node-js-1adb18d019d0\">Get Started with RabbitMQ in Node.js</a></p>\n<h4>What are we going to create?</h4>\n<ul>\n<li>A publisher app in node.js.</li>\n<li>An exchange and two queues.</li>\n<li>Two client apps (<em>client1</em> and <em>client2</em>). Both the client apps receive messages from their respective queue.</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*wFssVMnGDlqpM2hY7u4nkg.jpeg\"></figure><h4>Tools needed:</h4>\n<ol>\n<li>Node.js and NPM</li>\n<li>RabbitMQ</li>\n</ol>\n<p>If you don't have node.js installed in your system already, install it from <a href=\"https://nodejs.org/en/download/\">here</a>, based on your OS.</p>\n<p>If RabbitMQ is not installed in your system, install it from <a href=\"https://www.rabbitmq.com/download.html\">here</a> based on your platform or you can use <a href=\"https://registry.hub.docker.com/_/rabbitmq/\">this</a> docker image.</p>\n<p>I will use the <strong>RabbitMQ docker image </strong>to run the RabbitMQ server locally. If you are familiar with using Docker, you can run the following command to run the RabbitMQ server in your system.</p>\n<pre>docker run -it --rm --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3.9-management</pre>\n<p>The server is running at port 5672 and it is ready to connect.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Zp8kSas23XqCePI5y_uzNQ.png\"><figcaption>Server running</figcaption></figure><p>Our folder structure will look like this:</p>\n<pre><strong>\\publish-subscribe-demo</strong><br>  |-- <strong>\\publisher</strong><br>  |-- <strong>\\client1</strong><br>  |-- <strong>\\client2</strong></pre>\n<h3>Publisher</h3>\n<p>Under the project folder, create a new folder for the <em>publisher</em> server and set up the project.</p>\n<pre>mkdir publisher<br>cd publisher<br>npm init<br>npm i express amqplib</pre>\n<blockquote>\n<em>express-&gt; to create a node.js application.<br></em><em>amqplib-&gt; to create a message broker.</em>\n</blockquote>\n<p>Create a file called index.js and add the following.</p>\n<a href=\"https://medium.com/media/d0270de72e41219de3dbbbaff5c4572b/href\">https://medium.com/media/d0270de72e41219de3dbbbaff5c4572b/href</a><h4>Code explanation:</h4>\n<p><em>line 1- 6, 54: </em>We are creating a basic express app. Our publisher app is running on port <strong>4000</strong>.</p>\n<blockquote>(<a href=\"https://medium.com/featurepreneur/develop-a-backend-server-for-your-application-using-express-29deeae40ed1\">This article on Node.js</a> will help you get started if you are not familiar with node.)</blockquote>\n<pre>const express = require(\"express\")<br><br>const app = express()<br>const PORT = process.env.PORT || 4000; <br><br>app.use(express.json()) <br><br>//...<br>//...<br>//...<br><br>app.listen(PORT, () =&gt; console.log(\"Server listening at port \" + PORT))</pre>\n<p><em>line 8:</em> Importing the <em>amqplib </em>library. Using this, we will communicate with the RabbitMQ server.</p>\n<pre>const amqp = require(\"amqplib\");</pre>\n<h4>Connection code:</h4>\n<p><em>line 9–30: </em>We are wrapping the connection code in a function called ‘connectQueue()’. Inside the function, we will create a connection, channel and exchange.</p>\n<blockquote><em>amqp.connect() is used to connect to the RabbitMQ server. The URL of the server is passed (‘amqp://localhost:5672’) as a parameter.</em></blockquote>\n<blockquote>\n<em>After connecting to the RabbitMQ server, we are creating a channel using </em><em>createChannel() .</em>\n</blockquote>\n<p>channel.assertExchange() checks for an exchange with the given properties. If the exchange doesn’t exist, a new exchange will be created with the values passed.</p>\n<p>We are naming our exchange ‘test-exchange’. As we discussed earlier the exchange type would be ‘fanout’. You can provide any name for the exchange and queues.</p>\n<pre>var channel, connection;<br><br>const exchange_name = 'test-exchange';<br>const exchange_type = 'fanout';<br>// const message       = \"Hello World!\";<br><br>connectQueue() // call connectQueue function<br>async function connectQueue() {<br>    try {<br><br>        connection = await amqp.connect(\"amqp://localhost:5672\");<br>        channel = await connection.createChannel()<br><br>        // https://amqp-node.github.io/amqplib/channel_api.html#channel_assertExchange<br>        await channel.assertExchange(exchange_name, exchange_type, {<br>            durable: false<br>        })<br><br>    } catch (error) {<br>        console.log(error)<br>    }<br>}</pre>\n<blockquote>(If you are unfamiliar with async/await and other js concepts, click <a href=\"https://medium.com/featurepreneur/6-must-know-javascript-es6-concepts-6bbf1b448228\">here</a> to get a quick overview of some of the must-know javascript concepts)</blockquote>\n<p><em>line: 32–38: </em>Let’s write a function that publishes the messages to the queue.</p>\n<p>We are defining a function called sendMessageToQueue which will take a message as a parameter. In this function, we send the message to the queue using channel.publish(). In the publish() method, we pass the names of the exchange and the queue along with the message to be sent.</p>\n<pre>const sendMessageToQueue = async (message) =&gt; {<br>    const queue_name = '';<br>    await channel.publish(<br>        exchange_name,<br>        queue_name, <br>        Buffer.from(message)<br>    );<br>}</pre>\n<p><em>Line 40–53:</em> Finally, let’s create a simple API with the GET method. When this API is invoked, we will use the function ‘sendMessageToQueue’ to send the message (here, ‘Hello World!’) to the queue.</p>\n<pre>app.get(\"/send-msg\", (req, res) =&gt; {<br>    const message = \"Hello World!\";<br><br>    sendMessageToQueue(message)<br><br>    console.log(\"Message sent to the exchange\");<br><br>    // await channel.close();<br>    // await connection.close();<br><br>    res.send(\"Message Sent\");<br><br>})</pre>\n<p>Let’s create <strong>two</strong> client servers to receive messages.</p>\n<h3>Client 1</h3>\n<p>For client1, we’ll create a simple node application that will connect to and receive messages from the queue <em>‘test-queue1’.</em></p>\n<p>Create another folder called ‘client1’ at the root level. Initialise npm and install necessary modules.</p>\n<pre>mkdir client1<br>cd client1<br>npm init<br>npm i express amqplib</pre>\n<p>Create a file called ‘index.js’ and add the following.</p>\n<a href=\"https://medium.com/media/866a5326248294fc1f5da24663003b71/href\">https://medium.com/media/866a5326248294fc1f5da24663003b71/href</a><h4>Code explanation</h4>\n<p><em>Line 1–5 and 51: </em>First, we’ll set up the express app and make it listen to port <strong>5001</strong>.</p>\n<pre>const express = require(\"express\");<br>const app = express();<br>const PORT = process.env.PORT || 5001; <br>app.use(express.json()); <br><br>// RabbitMQ code<br><br>app.listen(PORT, () =&gt; console.log(\"Server running at port \" + PORT));</pre>\n<p><em>Line 7–24:</em> Then, we will connect to the RabbitMQ server, and create a new channel. (as we did in the <em>publisher</em> app).</p>\n<pre>const amqp = require(\"amqplib\");<br>var channel, connection;<br><br>const exchange_name = \"test-exchange\";<br>const exchange_type = \"fanout\";<br>const queue_name    = 'test-queue1';<br><br>connectToRabbitMQ(); <br>async function connectToRabbitMQ() {<br>  try {<br>    connection = await amqp.connect(\"amqp://localhost:5672\");<br>    channel = await connection.createChannel();<br><br>    connectToQueue()<br><br>  } catch (error) {<br>    console.log(error);<br>  }<br>}</pre>\n<p><em>line 26–49: </em>Now the part left to do is connect to the queue and consume the messages from the queue. We will create a function called ‘connectToQueue()’ to handle this.</p>\n<pre> async function connectToQueue() {<br><br>  await channel.assertExchange(exchange_name, exchange_type, {<br>    durable: false,<br>  });<br><br>  const q = await channel.assertQueue(queue_name, { exclusive: true });<br><br>  console.log(\"Waiting for messages....\");<br><br>  // binding the queue<br>  const binding_key = \"\";<br>  channel.bindQueue(q.queue, exchange_name, binding_key);<br><br>  console.log(\"consuming messages from queue: \", q.queue);<br>  channel.consume(<br>    q.queue,<br>    (msg) =&gt; {<br>      if (msg.content)<br>        console.log(\"Received message: \", msg.content.toString());<br>    },<br>    { noAck: true }<br>  );<br>}</pre>\n<p>Let’s connect to the exchange. (name — ‘test-exchange’, type — ‘fanout’). channel.assertExchange() is used to connect to the exchange.</p>\n<pre>await channel.assertExchange(exchange_name, exchange_type, {<br>    durable: false,<br>  });</pre>\n<p>Now, let's connect to the queue to receive the messages. The method channel.assertQueue() could be used to connect to the queue.</p>\n<pre>const q = await channel.assertQueue(queue_name, { exclusive: true });</pre>\n<p>We have to bind our new queue to the exchange with a binding key. Here, we set an empty binding key since we want to receive all the messages from the queue without any restrictions.</p>\n<pre>// binding the queue<br>  const binding_key = \"\";<br>  channel.bindQueue(q.queue, exchange_name, binding_key);</pre>\n<p>Let’s consume the messages from the queue using channel.consume() .</p>\n<p>consume() method takes the queue's name as a parameter and returns the message from the queue as a callback. The channel.ack() function is used to acknowledge that the particular message has been received by this app.</p>\n<pre>channel.consume(<br>    q.queue,<br>    (msg) =&gt; {<br>      if (msg.content)<br>        console.log(\"Received message: \", msg.content.toString());<br>        channel.ack(msg);<br>    }<br>  );</pre>\n<h3>Client 2</h3>\n<p>Now let’s create another app which will also receive the messages from the exchange.</p>\n<p>We can just make a copy of the client-1 and make a few changes.</p>\n<p><strong>Steps:</strong></p>\n<ul>\n<li>Copy the client1 folder and rename the folder to ‘client2’.</li>\n<li>Open the ‘index.js’ file of the <em>client2</em> app in an editor.</li>\n<li>Change the value of Port on line 3 from 5001 to 5002. (This app will run on port 5002 and connects to the RabbitMQ Server.)</li>\n</ul>\n<p><em>From:</em></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*jeu_e87zFhcuTyJwNNZbmA.png\"></figure><p><em>To:</em></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Oyn3DVaIrSKwls2vt3JZIA.png\"></figure><h3>Testing</h3>\n<p>It’s time to test our code.</p>\n<p>Make sure the RabbitMQ server is running.</p>\n<p>In the terminal, open the publisher, client1 and client2 folders in different tabs.</p>\n<p>Run the apps using the command node index.js in publisher, client1 and client2.</p>\n<pre>node index.js</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*rtDFZSNTtrpiQ2tXPOokjA.png\"></figure><p>Now when the apps are connected to the RabbitMQ server without errors, go to your browser and hit <a href=\"http://localhost:4000/send-msg\">http://localhost:4000/send-msg</a>. The publisher app will send a message to the exchange when it sees this request. The message will be broadcasted to the queue. From the queue, the message will be received by our client apps.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Ax6eTWoJSH2BZESiamnedw.png\"></figure><p>We can notice that the message has been sent from the publisher by looking at the app logs.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*N8c2LllEQaO-qWjZiKEMPw.png\"><figcaption>Publisher app logs</figcaption></figure><p>We can confirm the message has been received by both the client apps from their logs.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*zc9HB4DP7htf-UgPOyI2Cw.png\"><figcaption>Client1 (left) and Client2 app logs</figcaption></figure><p>Happy learning!</p>\n<p>Github repo: <a href=\"https://github.com/SharmilaS22/medium-rabbitmq-publish\">https://github.com/SharmilaS22/medium-rabbitmq-publish</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=1be74234df60\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://blog.devops.dev/publish-subscribe-model-with-rabbitmq-in-node-js-1be74234df60\">Publish/Subscribe Model with RabbitMQ in node.js</a> was originally published in <a href=\"https://blog.devops.dev/\">DevOps.dev</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "enclosure": {},
            "categories": [
                "nodejs",
                "technology",
                "rabbitmq",
                "queue"
            ]
        },
        {
            "title": "Create an s3 bucket with AWS CDK",
            "pubDate": "2022-11-22 17:10:15",
            "link": "https://blog.devops.dev/create-an-s3-bucket-with-aws-cdk-e012b43c3511?source=rss-5da727287624------2",
            "guid": "https://medium.com/p/e012b43c3511",
            "author": "Sharmila S",
            "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*JwvFaJGgmKFhqaDjtTEQeQ.jpeg",
            "description": "\n<p>This article will help you get started with AWS CDK by creating a simple s3 bucket.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*JwvFaJGgmKFhqaDjtTEQeQ.jpeg\"></figure><h4>AWS</h4>\n<p>AWS — Amazon web services — The largest cloud platform providing various services to work with the cloud. Some of the popular services provided by AWS include Amazon S3, AWS EC2, AWS Lambda etc.</p>\n<h4>AWS CDK</h4>\n<p>AWS Cloud Development Kit (CDK) is an open-source framework to write code to define your cloud infrastructure. AWS CDK supports different programming languages like JavaScript, TypeScript, Python, Java, C#, and Go. It is intended for moderately to highly experienced AWS users.</p>\n<h4>AWS Cloud Formation</h4>\n<p>With the help of CDK, we can create a cloud formation stack. Cloud Formation is another service provided by AWS. Using <a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/Welcome.html\">Cloud Formation</a>, we can model our infrastructure and manage them all in one place. i.e. it allows you to create and manage a stack of resources.</p>\n<p>Consider a scenario where for a new project, you wanted to create multiple AWS resources.</p>\n<ul>\n<li>You can go to each service’s page to create a particular resource. You can connect other resources to it. For example, If we want to create a lambda function that connects to an S3 bucket, we would create an s3 bucket separately and then create a lambda function and connect it to the S3 bucket.</li>\n<li>\n<em>Or</em>, you can use a cloud formation stack with details about the resources and their configurations. It becomes more manageable and easier to track which resource is connected to which resource.</li>\n</ul>\n<h3>Set up:</h3>\n<h4>1. Install AWS CLI and configure</h4>\n<p>If you don't have AWS CLI already, install AWS CLI to your system based on your OS by following the instructions <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html#getting-started-install-instructions\">here</a>.</p>\n<p><a href=\"https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html#getting-started-install-instructions\">Installing or updating the latest version of the AWS CLI</a></p>\n<p>The next step is to configure your AWS profile to use in the CLI. Follow the instructions from the <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-quickstart.html\">official documentation</a> based on your machine type.</p>\n<p><a href=\"https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-quickstart.html\">Configuration basics</a></p>\n<h4>2. Install AWS CDK using node</h4>\n<p>If you don't have node.js in your system already, download it from <a href=\"https://nodejs.org/en/\">here</a>. You can check whether node.js and npm are installed in your system using the command node --version and npm --version.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/548/1*y6ZRfa0n2S3oF-peOYbRgA.png\"></figure><p>Install aws-cdk package using the below command.</p>\n<pre>npm install -g aws-cdk</pre>\n<p>To see whether the CDK is installed, run the below command.</p>\n<pre>cdk --version</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/532/1*dngCnshcP4IDRFI8w3kZ_A.png\"></figure><blockquote>We will be seeing few commonly used CDK commands when we apply them. Refer <a href=\"https://docs.aws.amazon.com/cdk/v2/guide/cli.html#cli-commands\">here</a> to see all the CDK commands.</blockquote>\n<h4>3. Install python</h4>\n<p>Python is one of the languages supported by CDK. In this article, we will be using python to code our infrastructure. If you don't have python installed in your system, download it from <a href=\"https://www.python.org/downloads/\">here</a>.</p>\n<p><a href=\"https://www.python.org/downloads/\">Download Python</a></p>\n<h3>Create an s3 bucket</h3>\n<p>AWS S3 (AWS Simple Storage Service) is an <a href=\"https://en.wikipedia.org/wiki/Object_storage\">object storage</a> service by AWS. We can create buckets in S3 where we can store data and files.</p>\n<p>Let’s write code for creating an s3 bucket.</p>\n<ul><li>Create a new folder for our project.</li></ul>\n<pre>mkdir medium-awscdk</pre>\n<ul><li>Go to the project folder we just created and then create a CDK project in that folder.</li></ul>\n<pre>cd medium-awscdk<br>cdk init app --language python</pre>\n<blockquote>Using --language option, we can specify the language which we want to use to code our infrastructure. (In this article, we are using <em>python</em>)</blockquote>\n<blockquote>To use any other language (that is supported by CDK), replace ‘python’ with the <a href=\"https://docs.aws.amazon.com/cdk/v2/guide/cli.html#cli-init\">language</a>.</blockquote>\n<p>When we ran the cdk init command, an empty AWS CDK project was created which has all the necessary files to get started.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/446/1*BXeqk4xitdBvPt77uqa1Qw.png\"><figcaption>App file structure</figcaption></figure><p>Run the following commands to create and activate the virtual environment. We will be installing the required python modules in this virtual environment.</p>\n<pre>python3 -m venv .venv</pre>\n<pre>source .venv/bin/activate</pre>\n<blockquote>\n<strong><em>Note</em></strong><em>: whenever you open </em>a new terminal session<em>, make sure to activate environment using the command</em><em> source .venv/bin/activate before you proceed to work with CDK commands.</em>\n</blockquote>\n<p>Now the next step is to install the libraries for our project. The generated ‘requirements.txt’ file has the name of the CDK libraries that we need for our app to run.</p>\n<p>Let’s install the needed dependencies using the requirements.txt by running the below command.</p>\n<pre>pip install -r requirements.txt</pre>\n<h4>Create an S3 bucket</h4>\n<p>Within our project folder, you could find a directory with the same name as the parent folder (in <a href=\"https://en.wikipedia.org/wiki/Snake_case\">snake case</a>). (here, ‘medium_awscdk’)</p>\n<p>Go to the folder and open the file with the prefix ‘_stack’. (Here, it’s <em>medium_awscdk_stack.py</em>)</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/594/1*8o00LAqSs_XzfKz4gECeoQ.png\"></figure><p>We define the resources we want to create in this file.</p>\n<p>We need the ‘aws_s3’ module to create an s3 bucket, so we import it from aws_cdk.</p>\n<pre>from aws_cdk import (<br>    Stack,<br>    aws_s3 as s3<br>)</pre>\n<p>The cloud formation stack is defined in the python Class. (here, the class name is ‘MediumAwscdkStack’)</p>\n<pre>class MediumAwscdkStack(Stack):<br><br>    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:<br>        super().__init__(scope, construct_id, **kwargs)</pre>\n<p>We can define the AWS resources we wanted to create in the init method of the class.</p>\n<p>In the init method, add the following code where we define an s3 bucket using s3.Bucket(...).</p>\n<pre>s3.Bucket(<br>  self, <br>  id=\"bucket123\", <br>  bucket_name=\"BUCKET_NAME\" # Provide a bucket name here<br>)</pre>\n<p>We need to provide an <em>id</em> for each resource we create in CDK. (Here, I give the id as ‘bucket123’. This is a required parameter.</p>\n<p>You can also name your bucket with the <em>bucket_name</em> parameter. It is an optional parameter. (Here, I name the bucket ‘<em>sharmi-bucket123</em>’). <br>Note that the bucket name should be globally unique.</p>\n<blockquote>To know about all the parameters of S3 Bucket, view the official <a href=\"https://docs.aws.amazon.com/cdk/api/v1/python/aws_cdk.aws_s3/Bucket.html\">documentation</a>.</blockquote>\n<p>The final code looks like this.</p>\n<a href=\"https://medium.com/media/cbabcdcfcaf31f782c84f85de4c848d9/href\">https://medium.com/media/cbabcdcfcaf31f782c84f85de4c848d9/href</a><p>Our code is now ready to be deployed.</p>\n<h3>cdk ls</h3>\n<p>The command cdk ls is used to display the list of stacks we have configured in the project. If there’s any syntactical error in the code, this command won't display the stacks and throws the error.</p>\n<pre>cdk ls</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/750/1*DXj5rx23I3UU-7HdJA746g.png\"></figure><p>We have only created one stack in our project. (Here, <em>MediumAwscdkStack</em>) We can have multiple stacks with different purposes.</p>\n<p>Now, the next step is to convert our code to a CloudFormation template which could be deployed to the AWS Cloud. The below command helps here with this.</p>\n<pre>cdk synth</pre>\n<blockquote>The above command also displays an overview of the resources that would be created when we deploy the code. We can check the resources and their properties here, before deploying.</blockquote>\n<p>The cdk synth or cdk synthesize command creates a new folder called ‘cdk.out’ in the project directory. This folder contains the generated Cloud formation template and other CDK configurations.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/408/1*jB4VVwmrcjsPtM0MmG39ug.png\"><figcaption>cdk.out directory</figcaption></figure><p>The next step is to deploy this stack to the AWS Cloud. But to accomplish this, we need the necessary resources (<strong>CDK toolkit) </strong>deployed<strong> </strong>to the cloud formation service. This process is called bootstrapping. (More details <a href=\"https://docs.aws.amazon.com/cdk/v2/guide/bootstrapping.html\">here</a>).</p>\n<p>Run the below command to deploy the CDK Toolkit to CloudFormation.</p>\n<pre>cdk bootstrap</pre>\n<blockquote>\n<em>Note: </em>The above command does not have to be executed before each deployment. Once the toolkit is deployed to CloudFormation, you can deploy as many stacks as you want.</blockquote>\n<p>We are now ready to deploy our stack which creates an s3 bucket.</p>\n<p>Run the command cdk deploy to deploy.</p>\n<pre>cdk deploy</pre>\n<p>The command executes without errors if the stack is deployed successfully.</p>\n<p>Let’s visit the AWS Console to check whether our stack is deployed. In the AWS Console, go to the <em>CloudFormation </em>service.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*0kQxtNsEtibjxje7rikbbQ.png\"></figure><p>On the CloudFormation page, we can see our stack being deployed. (You would also find the <a href=\"https://docs.aws.amazon.com/cdk/v2/guide/bootstrapping.html\">CDK Toolkit stack</a> which was also deployed as a stack when we ran the cdk bootstrap command).</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*6-uYXeo3tVr-Cfa_H3NpHw.png\"></figure><p>Click on the stack we created (here, <em>MediumAwscdkStack</em>). And go to the resources tab to view all the resources deployed by the stack.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*JiEDjDwugMqd0nlFbs-7iQ.png\"></figure><p>You can also directly go to the Amazon S3 service in the AWS console to view the bucket created.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*3Z7LcK2kAlH-zlH_H-2KIA.png\"></figure><p>In this way, we can code our infrastructure using AWS CDK and deploy it in the AWS cloud.</p>\n<p>To destroy all the resources in the stack, the below command is used.</p>\n<pre>cdk destroy</pre>\n<p>The cdk destroy command deletes the stack (<em>MediumAwscdkStack</em>) from the AWS along with any resources created by this stack.</p>\n<p>So, the stack will be removed from CloudFormation. But, if you go to the S3 service, you will still see the bucket that was created.</p>\n<p>It’s because the S3 buckets have the <em>removal policy</em> as <em>retain</em> by default<em>. </em>You can provide the <em>removal policy</em> as <em>destroy</em> for the s3 bucket if you want the bucket to be deleted when the corresponding stack is deleted.</p>\n<pre>from aws_cdk import (<br>    Stack,<br>    aws_s3 as s3,<br>    RemovalPolicy    # &lt;-Import RemovalPolicy from aws_cdk<br>)<br><br># ...<br># ...<br><br>      s3.Bucket(<br>        self, <br>        id=\"bucket123\", <br>        bucket_name=\"sharmi-bucket123\",<br>        removal_policy=RemovalPolicy.DESTROY # &lt;-Add the parameter<br>      )</pre>\n<h4><em>Note:</em></h4>\n<p>Some properties of S3 and other resources cannot be modified after creation. So, if we are trying to make any change in the resource’s settings, a new resource will be created with the revised properties and the old one will be deleted. (For S3 buckets, a new bucket will be created with the new settings and the old bucket will be removed). But, when the removal policy is <em>retain</em>, the old resource will be retained and <strong>not deleted</strong>. It is the default option to avoid any loss of data in case the s3 bucket properties are modified accidentally.</p>\n<p>GitHub repo link: <a href=\"https://github.com/SharmilaS22/medium-aws-cdk-s3\">https://github.com/SharmilaS22/medium-aws-cdk-s3</a></p>\n<p>Hope this article helped!</p>\n<p>Happy learning!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=e012b43c3511\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://blog.devops.dev/create-an-s3-bucket-with-aws-cdk-e012b43c3511\">Create an s3 bucket with AWS CDK</a> was originally published in <a href=\"https://blog.devops.dev/\">DevOps.dev</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "content": "\n<p>This article will help you get started with AWS CDK by creating a simple s3 bucket.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*JwvFaJGgmKFhqaDjtTEQeQ.jpeg\"></figure><h4>AWS</h4>\n<p>AWS — Amazon web services — The largest cloud platform providing various services to work with the cloud. Some of the popular services provided by AWS include Amazon S3, AWS EC2, AWS Lambda etc.</p>\n<h4>AWS CDK</h4>\n<p>AWS Cloud Development Kit (CDK) is an open-source framework to write code to define your cloud infrastructure. AWS CDK supports different programming languages like JavaScript, TypeScript, Python, Java, C#, and Go. It is intended for moderately to highly experienced AWS users.</p>\n<h4>AWS Cloud Formation</h4>\n<p>With the help of CDK, we can create a cloud formation stack. Cloud Formation is another service provided by AWS. Using <a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/Welcome.html\">Cloud Formation</a>, we can model our infrastructure and manage them all in one place. i.e. it allows you to create and manage a stack of resources.</p>\n<p>Consider a scenario where for a new project, you wanted to create multiple AWS resources.</p>\n<ul>\n<li>You can go to each service’s page to create a particular resource. You can connect other resources to it. For example, If we want to create a lambda function that connects to an S3 bucket, we would create an s3 bucket separately and then create a lambda function and connect it to the S3 bucket.</li>\n<li>\n<em>Or</em>, you can use a cloud formation stack with details about the resources and their configurations. It becomes more manageable and easier to track which resource is connected to which resource.</li>\n</ul>\n<h3>Set up:</h3>\n<h4>1. Install AWS CLI and configure</h4>\n<p>If you don't have AWS CLI already, install AWS CLI to your system based on your OS by following the instructions <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html#getting-started-install-instructions\">here</a>.</p>\n<p><a href=\"https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html#getting-started-install-instructions\">Installing or updating the latest version of the AWS CLI</a></p>\n<p>The next step is to configure your AWS profile to use in the CLI. Follow the instructions from the <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-quickstart.html\">official documentation</a> based on your machine type.</p>\n<p><a href=\"https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-quickstart.html\">Configuration basics</a></p>\n<h4>2. Install AWS CDK using node</h4>\n<p>If you don't have node.js in your system already, download it from <a href=\"https://nodejs.org/en/\">here</a>. You can check whether node.js and npm are installed in your system using the command node --version and npm --version.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/548/1*y6ZRfa0n2S3oF-peOYbRgA.png\"></figure><p>Install aws-cdk package using the below command.</p>\n<pre>npm install -g aws-cdk</pre>\n<p>To see whether the CDK is installed, run the below command.</p>\n<pre>cdk --version</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/532/1*dngCnshcP4IDRFI8w3kZ_A.png\"></figure><blockquote>We will be seeing few commonly used CDK commands when we apply them. Refer <a href=\"https://docs.aws.amazon.com/cdk/v2/guide/cli.html#cli-commands\">here</a> to see all the CDK commands.</blockquote>\n<h4>3. Install python</h4>\n<p>Python is one of the languages supported by CDK. In this article, we will be using python to code our infrastructure. If you don't have python installed in your system, download it from <a href=\"https://www.python.org/downloads/\">here</a>.</p>\n<p><a href=\"https://www.python.org/downloads/\">Download Python</a></p>\n<h3>Create an s3 bucket</h3>\n<p>AWS S3 (AWS Simple Storage Service) is an <a href=\"https://en.wikipedia.org/wiki/Object_storage\">object storage</a> service by AWS. We can create buckets in S3 where we can store data and files.</p>\n<p>Let’s write code for creating an s3 bucket.</p>\n<ul><li>Create a new folder for our project.</li></ul>\n<pre>mkdir medium-awscdk</pre>\n<ul><li>Go to the project folder we just created and then create a CDK project in that folder.</li></ul>\n<pre>cd medium-awscdk<br>cdk init app --language python</pre>\n<blockquote>Using --language option, we can specify the language which we want to use to code our infrastructure. (In this article, we are using <em>python</em>)</blockquote>\n<blockquote>To use any other language (that is supported by CDK), replace ‘python’ with the <a href=\"https://docs.aws.amazon.com/cdk/v2/guide/cli.html#cli-init\">language</a>.</blockquote>\n<p>When we ran the cdk init command, an empty AWS CDK project was created which has all the necessary files to get started.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/446/1*BXeqk4xitdBvPt77uqa1Qw.png\"><figcaption>App file structure</figcaption></figure><p>Run the following commands to create and activate the virtual environment. We will be installing the required python modules in this virtual environment.</p>\n<pre>python3 -m venv .venv</pre>\n<pre>source .venv/bin/activate</pre>\n<blockquote>\n<strong><em>Note</em></strong><em>: whenever you open </em>a new terminal session<em>, make sure to activate environment using the command</em><em> source .venv/bin/activate before you proceed to work with CDK commands.</em>\n</blockquote>\n<p>Now the next step is to install the libraries for our project. The generated ‘requirements.txt’ file has the name of the CDK libraries that we need for our app to run.</p>\n<p>Let’s install the needed dependencies using the requirements.txt by running the below command.</p>\n<pre>pip install -r requirements.txt</pre>\n<h4>Create an S3 bucket</h4>\n<p>Within our project folder, you could find a directory with the same name as the parent folder (in <a href=\"https://en.wikipedia.org/wiki/Snake_case\">snake case</a>). (here, ‘medium_awscdk’)</p>\n<p>Go to the folder and open the file with the prefix ‘_stack’. (Here, it’s <em>medium_awscdk_stack.py</em>)</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/594/1*8o00LAqSs_XzfKz4gECeoQ.png\"></figure><p>We define the resources we want to create in this file.</p>\n<p>We need the ‘aws_s3’ module to create an s3 bucket, so we import it from aws_cdk.</p>\n<pre>from aws_cdk import (<br>    Stack,<br>    aws_s3 as s3<br>)</pre>\n<p>The cloud formation stack is defined in the python Class. (here, the class name is ‘MediumAwscdkStack’)</p>\n<pre>class MediumAwscdkStack(Stack):<br><br>    def __init__(self, scope: Construct, construct_id: str, **kwargs) -&gt; None:<br>        super().__init__(scope, construct_id, **kwargs)</pre>\n<p>We can define the AWS resources we wanted to create in the init method of the class.</p>\n<p>In the init method, add the following code where we define an s3 bucket using s3.Bucket(...).</p>\n<pre>s3.Bucket(<br>  self, <br>  id=\"bucket123\", <br>  bucket_name=\"BUCKET_NAME\" # Provide a bucket name here<br>)</pre>\n<p>We need to provide an <em>id</em> for each resource we create in CDK. (Here, I give the id as ‘bucket123’. This is a required parameter.</p>\n<p>You can also name your bucket with the <em>bucket_name</em> parameter. It is an optional parameter. (Here, I name the bucket ‘<em>sharmi-bucket123</em>’). <br>Note that the bucket name should be globally unique.</p>\n<blockquote>To know about all the parameters of S3 Bucket, view the official <a href=\"https://docs.aws.amazon.com/cdk/api/v1/python/aws_cdk.aws_s3/Bucket.html\">documentation</a>.</blockquote>\n<p>The final code looks like this.</p>\n<a href=\"https://medium.com/media/cbabcdcfcaf31f782c84f85de4c848d9/href\">https://medium.com/media/cbabcdcfcaf31f782c84f85de4c848d9/href</a><p>Our code is now ready to be deployed.</p>\n<h3>cdk ls</h3>\n<p>The command cdk ls is used to display the list of stacks we have configured in the project. If there’s any syntactical error in the code, this command won't display the stacks and throws the error.</p>\n<pre>cdk ls</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/750/1*DXj5rx23I3UU-7HdJA746g.png\"></figure><p>We have only created one stack in our project. (Here, <em>MediumAwscdkStack</em>) We can have multiple stacks with different purposes.</p>\n<p>Now, the next step is to convert our code to a CloudFormation template which could be deployed to the AWS Cloud. The below command helps here with this.</p>\n<pre>cdk synth</pre>\n<blockquote>The above command also displays an overview of the resources that would be created when we deploy the code. We can check the resources and their properties here, before deploying.</blockquote>\n<p>The cdk synth or cdk synthesize command creates a new folder called ‘cdk.out’ in the project directory. This folder contains the generated Cloud formation template and other CDK configurations.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/408/1*jB4VVwmrcjsPtM0MmG39ug.png\"><figcaption>cdk.out directory</figcaption></figure><p>The next step is to deploy this stack to the AWS Cloud. But to accomplish this, we need the necessary resources (<strong>CDK toolkit) </strong>deployed<strong> </strong>to the cloud formation service. This process is called bootstrapping. (More details <a href=\"https://docs.aws.amazon.com/cdk/v2/guide/bootstrapping.html\">here</a>).</p>\n<p>Run the below command to deploy the CDK Toolkit to CloudFormation.</p>\n<pre>cdk bootstrap</pre>\n<blockquote>\n<em>Note: </em>The above command does not have to be executed before each deployment. Once the toolkit is deployed to CloudFormation, you can deploy as many stacks as you want.</blockquote>\n<p>We are now ready to deploy our stack which creates an s3 bucket.</p>\n<p>Run the command cdk deploy to deploy.</p>\n<pre>cdk deploy</pre>\n<p>The command executes without errors if the stack is deployed successfully.</p>\n<p>Let’s visit the AWS Console to check whether our stack is deployed. In the AWS Console, go to the <em>CloudFormation </em>service.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*0kQxtNsEtibjxje7rikbbQ.png\"></figure><p>On the CloudFormation page, we can see our stack being deployed. (You would also find the <a href=\"https://docs.aws.amazon.com/cdk/v2/guide/bootstrapping.html\">CDK Toolkit stack</a> which was also deployed as a stack when we ran the cdk bootstrap command).</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*6-uYXeo3tVr-Cfa_H3NpHw.png\"></figure><p>Click on the stack we created (here, <em>MediumAwscdkStack</em>). And go to the resources tab to view all the resources deployed by the stack.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*JiEDjDwugMqd0nlFbs-7iQ.png\"></figure><p>You can also directly go to the Amazon S3 service in the AWS console to view the bucket created.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*3Z7LcK2kAlH-zlH_H-2KIA.png\"></figure><p>In this way, we can code our infrastructure using AWS CDK and deploy it in the AWS cloud.</p>\n<p>To destroy all the resources in the stack, the below command is used.</p>\n<pre>cdk destroy</pre>\n<p>The cdk destroy command deletes the stack (<em>MediumAwscdkStack</em>) from the AWS along with any resources created by this stack.</p>\n<p>So, the stack will be removed from CloudFormation. But, if you go to the S3 service, you will still see the bucket that was created.</p>\n<p>It’s because the S3 buckets have the <em>removal policy</em> as <em>retain</em> by default<em>. </em>You can provide the <em>removal policy</em> as <em>destroy</em> for the s3 bucket if you want the bucket to be deleted when the corresponding stack is deleted.</p>\n<pre>from aws_cdk import (<br>    Stack,<br>    aws_s3 as s3,<br>    RemovalPolicy    # &lt;-Import RemovalPolicy from aws_cdk<br>)<br><br># ...<br># ...<br><br>      s3.Bucket(<br>        self, <br>        id=\"bucket123\", <br>        bucket_name=\"sharmi-bucket123\",<br>        removal_policy=RemovalPolicy.DESTROY # &lt;-Add the parameter<br>      )</pre>\n<h4><em>Note:</em></h4>\n<p>Some properties of S3 and other resources cannot be modified after creation. So, if we are trying to make any change in the resource’s settings, a new resource will be created with the revised properties and the old one will be deleted. (For S3 buckets, a new bucket will be created with the new settings and the old bucket will be removed). But, when the removal policy is <em>retain</em>, the old resource will be retained and <strong>not deleted</strong>. It is the default option to avoid any loss of data in case the s3 bucket properties are modified accidentally.</p>\n<p>GitHub repo link: <a href=\"https://github.com/SharmilaS22/medium-aws-cdk-s3\">https://github.com/SharmilaS22/medium-aws-cdk-s3</a></p>\n<p>Hope this article helped!</p>\n<p>Happy learning!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=e012b43c3511\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://blog.devops.dev/create-an-s3-bucket-with-aws-cdk-e012b43c3511\">Create an s3 bucket with AWS CDK</a> was originally published in <a href=\"https://blog.devops.dev/\">DevOps.dev</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "enclosure": {},
            "categories": [
                "aws",
                "cloud",
                "devops",
                "aws-s3"
            ]
        },
        {
            "title": "RabbitMQ Exchange Types Explained",
            "pubDate": "2022-08-01 14:47:36",
            "link": "https://blog.devops.dev/rabbitmq-exchange-types-explained-5fd9086595f5?source=rss-5da727287624------2",
            "guid": "https://medium.com/p/5fd9086595f5",
            "author": "Sharmila S",
            "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*iBvSpag0T40PipJh9LMrdg.gif",
            "description": "\n<p>This article explains the different types of exchanges in RabbitMQ.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*iBvSpag0T40PipJh9LMrdg.gif\"><figcaption>Image by Author</figcaption></figure><blockquote>\n<strong>Exchange</strong><br>An exchange receives messages from the Provider and sends them to the desired queues.</blockquote>\n<ul>\n<li>The provider will send a message to the exchange.</li>\n<li>An exchange is connected to one or more queues.</li>\n<li>A queue can be bound to the exchange with a <em>binding key</em>.</li>\n<li>The exchange handles the transferring of messages from the provider to the queues.</li>\n<li>The type of the exchange will decide which queue(s) should be receiving the messages.</li>\n<li>The client servers are connected to the queues to receive messages.</li>\n<li>A message can be sent to one or more queues.</li>\n</ul>\n<p>Let’s look at the exchange types one by one.</p>\n<h3>Types of Exchanges:</h3>\n<h4>1. Direct Exchange</h4>\n<p>In this type of exchange,</p>\n<ul>\n<li>The provider sends the message with a <em>routing key</em>.</li>\n<li>Each queue (that is connected to the exchange) has a unique <em>binding key</em>.</li>\n<li>When the exchange receives the message, the routing key of the message is compared with the binding keys of the connected queues.</li>\n<li>Then, the message is sent to the queue whose binding key matches the routing key. The servers connected to that queue will receive the message.</li>\n</ul>\n<p>Let’s look at the below example.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*viM5Luqx23i9D7lUVYCaQQ.gif\"><figcaption>Direct Exchange — example</figcaption></figure><ul>\n<li>The message with the routing key ‘C’ is sent by the provider.</li>\n<li>When the exchange receives the message, it sends the message to the 3rd queue whose binding key is also ‘C’.</li>\n<li>The message is then delivered to the ‘client 3' server.</li>\n</ul>\n<h4>2. Topic Exchange</h4>\n<ul>\n<li>This exchange type is similar to the ‘Direct exchange’. But the difference is that it allows a partial match of the binding key.</li>\n<li>The routing key can contain a * or # symbol to match a part of the binding key.</li>\n<li>Eg, hello.* matches hello.world, hello.friends etc.</li>\n<li>The asterisk (*) matches one or more keys. The hash (#) symbol matches zero or more keys.</li>\n<li>Eg. sports.* can represent sports.tennis, sports.cricket etc. Meanwhile, sports.# can match sports, sports.tennis, sports.cricket etc.</li>\n</ul>\n<p>An example:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*xmJrI3xy1V_sF7Pw8VW4Jg.gif\"><figcaption>Topic Exchange — Example</figcaption></figure><p>In this example,</p>\n<ul>\n<li>The message has a routing key of ‘tech.*’ which could match any string that starts with ‘tech.’.</li>\n<li>The message is sent to the queues with binding keys, ‘tech.web’ and ‘tech.ML’.</li>\n</ul>\n<h4>3. Default Exchange</h4>\n<p>This type of exchange is the default one. Instead of a binding key, this type uses the <strong>names</strong> of the queue to compare with the routing key to pass on the messages.</p>\n<p>Example:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*UG5ftEkSDidgoIYqxWFhIQ.gif\"><figcaption>Default Exchange</figcaption></figure><p>In this example,</p>\n<ul>\n<li>There are three queues with the names ‘Technology’, ‘Arts’ and ‘Writing’ respectively.</li>\n<li>The message sent by the provider has the routing key ‘Writing’ which matches the 3rd queue’s name.</li>\n<li>So, the message is sent to the Writing queue.</li>\n</ul>\n<h4>4. Fanout Exchange</h4>\n<p>This exchange basically broadcasts the message to all the queues connected to it.</p>\n<p>Example:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*18sL8UKSpSMZJD9cErqlpg.gif\"></figure><p>In this example,</p>\n<ul>\n<li>There are again three queues connected to the exchange.</li>\n<li>Unlike the other types of exchanges, there is no comparison of keys here.</li>\n<li>The message received by the exchange is sent to all three queues.</li>\n</ul>\n<h4>5. Header Exchange</h4>\n<p>In this type, the <em>header properties</em> are used instead of the routing keys and the binding keys.</p>\n<p>For this type,</p>\n<ul>\n<li>Each queue has a set of properties (key-value pairs) associated with it.</li>\n<li>The messages sent from the provider also have one or more properties with them.</li>\n</ul>\n<p>These properties are compared by the exchange to decide which queue(s) should receive it.</p>\n<p>The header has a special property called ‘x-match’ which takes either ‘any’ or ‘all’ as its value. This x-match property indicates whether some of the header properties can match or all of them should match.</p>\n<blockquote>x-match: ‘all’ — all the header properties should match.<br>x-match: ‘any’ — at least one header property should match.</blockquote>\n<h4>Example</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*9fXq2yoRA8KCEbC5stdnkQ.gif\"><figcaption>Header exchange — example</figcaption></figure><p>In this example,</p>\n<ul><li>There are 3 queues with the following settings.</li></ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*xoSrKHnuCJxX6qYUtVSHsw.jpeg\"><figcaption>Queues and their headers</figcaption></figure><ul><li>The message has two properties:</li></ul>\n<pre>genre: ‘fantasy’</pre>\n<pre>author: ‘Sarah J. Mass’</pre>\n<ul>\n<li>When this message is published from the provider, the header properties are compared with the queue’s properties and criteria.</li>\n<li>The message is sent to queues #1 and #2 since the properties match their criteria.</li>\n</ul>\n<h4>Example #2</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*pPj88qABMDCTUvNdZXGzMQ.gif\"><figcaption>Header exchange — example</figcaption></figure><p>Here,</p>\n<ul><li>The message has the following properties:</li></ul>\n<pre>genre: ‘fantasy’</pre>\n<pre>author: ‘J K Rowling’</pre>\n<ul><li>This only matches with the first queue since the genre is ‘fantasy’.</li></ul>\n<p>Hope this article helped!</p>\n<p>If you want to get started with RabbitMQ, the article below will guide you in building a simple RabbitMQ application in the node.js framework.</p>\n<p><a href=\"https://sharmilas.medium.com/get-started-with-rabbitmq-in-node-js-1adb18d019d0\">Get Started with RabbitMQ in Node.js</a></p>\n<p>Happy Learning! Follow for more!!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=5fd9086595f5\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://blog.devops.dev/rabbitmq-exchange-types-explained-5fd9086595f5\">RabbitMQ Exchange Types Explained</a> was originally published in <a href=\"https://blog.devops.dev/\">DevOps.dev</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "content": "\n<p>This article explains the different types of exchanges in RabbitMQ.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*iBvSpag0T40PipJh9LMrdg.gif\"><figcaption>Image by Author</figcaption></figure><blockquote>\n<strong>Exchange</strong><br>An exchange receives messages from the Provider and sends them to the desired queues.</blockquote>\n<ul>\n<li>The provider will send a message to the exchange.</li>\n<li>An exchange is connected to one or more queues.</li>\n<li>A queue can be bound to the exchange with a <em>binding key</em>.</li>\n<li>The exchange handles the transferring of messages from the provider to the queues.</li>\n<li>The type of the exchange will decide which queue(s) should be receiving the messages.</li>\n<li>The client servers are connected to the queues to receive messages.</li>\n<li>A message can be sent to one or more queues.</li>\n</ul>\n<p>Let’s look at the exchange types one by one.</p>\n<h3>Types of Exchanges:</h3>\n<h4>1. Direct Exchange</h4>\n<p>In this type of exchange,</p>\n<ul>\n<li>The provider sends the message with a <em>routing key</em>.</li>\n<li>Each queue (that is connected to the exchange) has a unique <em>binding key</em>.</li>\n<li>When the exchange receives the message, the routing key of the message is compared with the binding keys of the connected queues.</li>\n<li>Then, the message is sent to the queue whose binding key matches the routing key. The servers connected to that queue will receive the message.</li>\n</ul>\n<p>Let’s look at the below example.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*viM5Luqx23i9D7lUVYCaQQ.gif\"><figcaption>Direct Exchange — example</figcaption></figure><ul>\n<li>The message with the routing key ‘C’ is sent by the provider.</li>\n<li>When the exchange receives the message, it sends the message to the 3rd queue whose binding key is also ‘C’.</li>\n<li>The message is then delivered to the ‘client 3' server.</li>\n</ul>\n<h4>2. Topic Exchange</h4>\n<ul>\n<li>This exchange type is similar to the ‘Direct exchange’. But the difference is that it allows a partial match of the binding key.</li>\n<li>The routing key can contain a * or # symbol to match a part of the binding key.</li>\n<li>Eg, hello.* matches hello.world, hello.friends etc.</li>\n<li>The asterisk (*) matches one or more keys. The hash (#) symbol matches zero or more keys.</li>\n<li>Eg. sports.* can represent sports.tennis, sports.cricket etc. Meanwhile, sports.# can match sports, sports.tennis, sports.cricket etc.</li>\n</ul>\n<p>An example:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*xmJrI3xy1V_sF7Pw8VW4Jg.gif\"><figcaption>Topic Exchange — Example</figcaption></figure><p>In this example,</p>\n<ul>\n<li>The message has a routing key of ‘tech.*’ which could match any string that starts with ‘tech.’.</li>\n<li>The message is sent to the queues with binding keys, ‘tech.web’ and ‘tech.ML’.</li>\n</ul>\n<h4>3. Default Exchange</h4>\n<p>This type of exchange is the default one. Instead of a binding key, this type uses the <strong>names</strong> of the queue to compare with the routing key to pass on the messages.</p>\n<p>Example:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*UG5ftEkSDidgoIYqxWFhIQ.gif\"><figcaption>Default Exchange</figcaption></figure><p>In this example,</p>\n<ul>\n<li>There are three queues with the names ‘Technology’, ‘Arts’ and ‘Writing’ respectively.</li>\n<li>The message sent by the provider has the routing key ‘Writing’ which matches the 3rd queue’s name.</li>\n<li>So, the message is sent to the Writing queue.</li>\n</ul>\n<h4>4. Fanout Exchange</h4>\n<p>This exchange basically broadcasts the message to all the queues connected to it.</p>\n<p>Example:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*18sL8UKSpSMZJD9cErqlpg.gif\"></figure><p>In this example,</p>\n<ul>\n<li>There are again three queues connected to the exchange.</li>\n<li>Unlike the other types of exchanges, there is no comparison of keys here.</li>\n<li>The message received by the exchange is sent to all three queues.</li>\n</ul>\n<h4>5. Header Exchange</h4>\n<p>In this type, the <em>header properties</em> are used instead of the routing keys and the binding keys.</p>\n<p>For this type,</p>\n<ul>\n<li>Each queue has a set of properties (key-value pairs) associated with it.</li>\n<li>The messages sent from the provider also have one or more properties with them.</li>\n</ul>\n<p>These properties are compared by the exchange to decide which queue(s) should receive it.</p>\n<p>The header has a special property called ‘x-match’ which takes either ‘any’ or ‘all’ as its value. This x-match property indicates whether some of the header properties can match or all of them should match.</p>\n<blockquote>x-match: ‘all’ — all the header properties should match.<br>x-match: ‘any’ — at least one header property should match.</blockquote>\n<h4>Example</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*9fXq2yoRA8KCEbC5stdnkQ.gif\"><figcaption>Header exchange — example</figcaption></figure><p>In this example,</p>\n<ul><li>There are 3 queues with the following settings.</li></ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*xoSrKHnuCJxX6qYUtVSHsw.jpeg\"><figcaption>Queues and their headers</figcaption></figure><ul><li>The message has two properties:</li></ul>\n<pre>genre: ‘fantasy’</pre>\n<pre>author: ‘Sarah J. Mass’</pre>\n<ul>\n<li>When this message is published from the provider, the header properties are compared with the queue’s properties and criteria.</li>\n<li>The message is sent to queues #1 and #2 since the properties match their criteria.</li>\n</ul>\n<h4>Example #2</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*pPj88qABMDCTUvNdZXGzMQ.gif\"><figcaption>Header exchange — example</figcaption></figure><p>Here,</p>\n<ul><li>The message has the following properties:</li></ul>\n<pre>genre: ‘fantasy’</pre>\n<pre>author: ‘J K Rowling’</pre>\n<ul><li>This only matches with the first queue since the genre is ‘fantasy’.</li></ul>\n<p>Hope this article helped!</p>\n<p>If you want to get started with RabbitMQ, the article below will guide you in building a simple RabbitMQ application in the node.js framework.</p>\n<p><a href=\"https://sharmilas.medium.com/get-started-with-rabbitmq-in-node-js-1adb18d019d0\">Get Started with RabbitMQ in Node.js</a></p>\n<p>Happy Learning! Follow for more!!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=5fd9086595f5\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://blog.devops.dev/rabbitmq-exchange-types-explained-5fd9086595f5\">RabbitMQ Exchange Types Explained</a> was originally published in <a href=\"https://blog.devops.dev/\">DevOps.dev</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "enclosure": {},
            "categories": [
                "technology",
                "rabbitmq",
                "devops",
                "microservices"
            ]
        },
        {
            "title": "Deploy a pod to the local Kubernetes cluster",
            "pubDate": "2022-07-09 18:24:11",
            "link": "https://sharmilas.medium.com/deploy-a-pod-to-the-local-kubernetes-cluster-61b33672dfec?source=rss-5da727287624------2",
            "guid": "https://medium.com/p/61b33672dfec",
            "author": "Sharmila S",
            "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*XkbFsZzTC2lqe6GaKFDaQw.gif",
            "description": "\n<p>This article guides you through creating and deploying a pod along with a service to a Kubernetes cluster in your local system.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*XkbFsZzTC2lqe6GaKFDaQw.gif\"></figure><h4>System Pre-requisites</h4>\n<ul>\n<li>Docker</li>\n<li>Minikube</li>\n</ul>\n<h4>Pods</h4>\n<ul>\n<li>Pods are the smallest deployable units in Kubernetes.</li>\n<li>A pod has a container running in it. <em>(In some cases, a pod might contain more than one container).</em>\n</li>\n<li>Apps can be scaled by spinning up more pods <em>(not by running more containers in a single pod).</em>\n</li>\n<li>Each pod is assigned a private IP address.</li>\n<li>A <strong>node</strong> can have multiple pods.</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*DyCVWwaNdEM79muWT0qXZg.png\"></figure><p>Applications should be containerised to deploy to a pod.</p>\n<p>In this article, we will deploy the docker image of a simple hello world application. This app is built using node.js.</p>\n<blockquote>If you are not familiar with docker, <a href=\"https://medium.com/featurepreneur/a-guide-to-dockerize-your-node-js-application-c24b5e129995\">this article</a> will guide you in the process of creating a docker image of a node application.</blockquote>\n<p>The docker image used in this article is published to dockerhub. So, you can easily use it to follow along with the tutorial. If you already have a docker image ready to be deployed, you can also go ahead with that.</p>\n<blockquote>Dockerhub— where users can create their own private/public repositories to contain their images and also can access any open-source image.</blockquote>\n<h3>Configuring the Pod</h3>\n<p>Kubernetes includes a <em>container runtime</em> (eg. docker). The <em>container runtime</em> will spin up a container from the image that we provide.</p>\n<blockquote>If minikube is not installed in your system, visit <a href=\"https://kubernetes.io/docs/tasks/tools/\">this site to download it</a>.</blockquote>\n<ul><li>Start minikube in your system using the command below in your terminal.</li></ul>\n<pre>minikube start</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*80Q2brHAzC9m4Pxfo2oqMw.png\"><figcaption>minikube start</figcaption></figure><ul><li>The next step is to create a YAML file to hold the configurations for our pod. Let’s name it pod.yaml and add the following.</li></ul>\n<a href=\"https://medium.com/media/1260faf6fbd899372fec4371b66bf991/href\">https://medium.com/media/1260faf6fbd899372fec4371b66bf991/href</a><p>We have some pre-defined fields for configuring our pod. We can have a glance at these specifications by typing kubectl explain pod in the terminal.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*YKr8cmcuZaUG0h3femm0hA.png\"></figure><p>This informs us that, for the pod configuration, the version is v1 and the kind is Pod . It also displays a brief explanation of the required fields for configuring pods. To learn more, visit <a href=\"https://kubernetes.io/docs/concepts/workloads/pods/\">here</a>.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/841/1*aKv6tlJSjVgFiah5sp_AXg.png\"></figure><p>Now, let’s look into each line of our YAML file.</p>\n<pre>apiVersion: v1<br>kind: Pod</pre>\n<p>The above two statements in the file describe the version and the kind of configuration. (As we just learnt that for a pod, the apiVersion should be ‘v1’ and the kind should be ‘Pod’)</p>\n<pre>metadata:<br>  - name: pod-demo<br>    labels:<br>      app: hello-world</pre>\n<p>The ‘metadata’ field is used to provide the ‘name’ and ‘labels’ for the pod.</p>\n<p>Here, the name of our pod is pod-demo and it has a label app: hello-world. Labels are useful in filtering out certain pods from all the pods in a namespace.</p>\n<pre>spec:<br>  containers:<br>    - name: hello-world<br>      image: sharmilas22/hello-world-app:latest<br>      ports:<br>        - containerPort: 4000</pre>\n<p>Under the spec option, we can mention the specifications of the <em>containers</em> that will run inside the pod. Here, we specify that a container with the name hello-world should be spun up using the image sharmilas22/hello-world-app:latest (this image will be pulled from dockerhub to your system)</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*TpD4-bDDK9WQV7k1wMyt3A.png\"><figcaption>image in dockerhub</figcaption></figure><p>Along with these data, we also mention the port where our app would be running (4000).</p>\n<ul><li>Once we made the YAML file ready, our next step would be to apply them using,</li></ul>\n<pre>kubectl apply -f pod.yaml</pre>\n<blockquote>-f option is used to specify the file path (here, ‘pod.yaml’).</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/944/1*AinyR-uhcof3jrAymBV51Q.png\"><figcaption>apply pod.yaml</figcaption></figure><p>Our pod is now created. We can view all the pods in our system using,</p>\n<pre>kubectl get pods </pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/852/1*o8f3rwO4dKSSp7MorZT2MQ.png\"><figcaption>Pod running</figcaption></figure><blockquote>The status of our pod is ‘Running’, which means our pod is up and running. <br>If you see ‘ContainerCreating’ as the status, it means that the pod is now getting created and will be up when it’s done.</blockquote>\n<blockquote>Learn more about the pod status, <a href=\"https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#pod-phase\">here</a>.</blockquote>\n<p>The -o wide option is used with the above command to view more information about the running pods.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*TLIqMpSh9DxcyU4UqAuvsw.png\"><figcaption>-o wide option</figcaption></figure><p>We can see that the IP assigned to the pod is ‘172.17.0.2’ and minikube is the node where the pod is running.</p>\n<p>The IP address of the pod can be used to access them from the kubernetes network.</p>\n<p>Let’s try to access our pod from the minikube network. Type the following command, to enter into the minikube in command mode.</p>\n<pre>minikube ssh</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*AQuAZ13aIJ8p1MHdrnavDA.png\"></figure><p>Once we enter into the minikube in command mode, we request to the pod IP (<em>the IP assigned to our pod is 172.17.0.2, we can view it using</em><em> kubectl get pods -o wide</em> as we saw earlier) with the app port (<em>4000</em>).</p>\n<pre>curl http://&lt;IP-of-your-pod&gt;:4000</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/684/1*elXPbF2xne1OxhduvOxqog.png\"></figure><p>We could able to access and get a response from the app! Congratulations! We deployed our pod to the Kubernetes cluster successfully!!</p>\n<p>But our job is not over yet.</p>\n<p>Our pod is deployed and running, but not exposed to our local system, i.e. we cannot be able to access it from outside the minikube (from our local system).</p>\n<p>We need a kubernetes ‘service’ to allow us to connect to our pods from outside the kubernetes network.</p>\n<h4>Let’s create a Service for our pod</h4>\n<ul><li>Create a new file called ‘service.yaml’ and add the following,</li></ul>\n<a href=\"https://medium.com/media/29c389928744c66479aa96a4693ad4ac/href\">https://medium.com/media/29c389928744c66479aa96a4693ad4ac/href</a><p>Similar to a pod, we can use kubectl explain service to have a quick look at the fields needed for our configuration. Our service config file should have the apiVersion as ‘v1’ and kind as ‘Service’.</p>\n<blockquote>Learn more about service <a href=\"https://kubernetes.io/docs/concepts/services-networking/service/\">here</a>.</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*EOmJ_buYiVqAlvCR-l0g6w.png\"><figcaption>service</figcaption></figure><p>We are also specifying a name for our service (here, ‘service-demo’) using the metadata field.</p>\n<pre>metadata:<br>  name: service-demo</pre>\n<p>In spec , we define three fields: <em>type</em>, <em>selector</em> and <em>ports</em>.</p>\n<pre>spec:<br>  type: NodePort<br>  selector:<br>    app: hello-world<br>  ports:<br>  - protocol: TCP<br>    port: 80<br>    targetPort: 4000<br>    nodePort: 30001</pre>\n<p><strong>type</strong> — This field is used to specify the type of the service. The service type would define how the service is exposed. There are 4 valid options: <em>ClusterIP</em>, <em>NodePort</em>, <em>ExternalName</em> and <em>LoadBalancer</em>.</p>\n<blockquote>\n<em>ClusterIP</em> —(default) Exposes the service within the cluster where it’s present.</blockquote>\n<blockquote>\n<em>NodePort</em> — Exposes the service on the nodeIP and nodePort. Can be accessible outside the cluster.</blockquote>\n<blockquote>\n<em>LoadBalancer</em> — Exposes the service to an external load balancer (eg., aws Elastic Load Balancer).</blockquote>\n<blockquote>\n<em>ExternalName</em> — Aliases the service to the specified externalName.<br><br>Learn more <a href=\"https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types\">here</a>.</blockquote>\n<p>Here, our service will be of type <em>NodePort</em>.</p>\n<p><strong>selector</strong> — This field is used to map the pods to the service using <em>labels</em>. Here, we have the selector as app: hello-world , so this service will open traffic to any pod that is running with this particular label. (Remember that we provided this exact label to our pod while configuring it)</p>\n<p><strong>ports</strong> — We define a port with the TCP protocol and port 80.</p>\n<ul>\n<li>\n<em>The targetPort</em> is the port where our container is running (here, our container port is 4000).</li>\n<li>The<em> nodePort</em> is the port where we want our service to be exposed. The port number to be specified should be in the range of 30000 to 32767 (Here, we gave 30001 as our node port). Using the <em>nodePort</em> and the <em>nodeIP</em>, we can access our service from outside the cluster.</li>\n</ul>\n<p>Let’s apply the <em>service.yaml</em> to create our service,</p>\n<pre>kubectl apply -f service.yaml</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*UIpK1o27TQ-pQD78cGY6jw.png\"></figure><p>Our service is deployed now.</p>\n<p>To view all the objects(pods, services etc) in the kubernetes network, we can use kubectl get all command.</p>\n<pre>kubectl get all</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*MonQUiLzbrNGGldDc8oQug.png\"><figcaption>kubectl get all</figcaption></figure><p>Now, we can see that our service ‘service-demo’ is running.</p>\n<p>The URL of the service is used to access our pod from outside the kubernetes cluster. Let us get the URL for our service using,</p>\n<pre>minikube service &lt;service-name&gt; --url</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*5g_D6cvJzfy6soJ6_imOpw.png\"></figure><p>Let’s try to access the URL from our system.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*TcRutnbhe3vlXc3D2r0u7g.png\"></figure><p>Congratulations! We have successfully deployed our pod and connected it to a service to access it!</p>\n<p>Let’s try to understand the URL.</p>\n<pre>http://192.168.64.2:30001</pre>\n<p>In this URL ‘192.168.64.2’ is the node IP and ‘30001’ is the node port.</p>\n<blockquote>We know that the node port is 30001 since we provided it in the service configuration.</blockquote>\n<h4>But what does the IP address mean?</h4>\n<p>Since we are running kubernetes on our local system, the minikube is the only node running in our kubernetes cluster. (We can view all the nodes by kubectl get nodes )</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*bFHqFVaNuc-1A9lbLGQrtg.png\"></figure><p>Our pod is running in the minikube node. Hence, the node IP for our service is the IP address of the minikube which could be viewed by,</p>\n<pre>minikube ip</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/776/1*C99G_Xi61V8ZT9WqsCA4cw.png\"><figcaption>nodeIP</figcaption></figure><p>We can also look into the details of our pod to know that it is running in the minikube node. The command ‘kubectl describe pod pod-demo’ gives us all the necessary information about our pod ‘pod-demo’.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Vfd1ZUKsc6TqCZ-rlh4Eqw.png\"></figure><p>From the above picture, we can understand that our pod is running in the node ‘minikube’ which has the IP 192.168.64.2. And this is the reason for our service to have this IP address.</p>\n<h3>Some useful Kubectl commands</h3>\n<ul><li>To view all the pods/services,</li></ul>\n<pre>kubectl get pods</pre>\n<pre>kubectl get services </pre>\n<ul><li>To delete pods/services,</li></ul>\n<pre>kubectl delete pod &lt;pod-name&gt;<br><em>or</em><br>kubectl delete pod/&lt;pod-name&gt;</pre>\n<pre>kubectl delete svc &lt;service-name&gt;<br><em>or</em><br>kubectl delete svc/&lt;service-name&gt;</pre>\n<ul><li>To view information about a particular pod or a service,</li></ul>\n<pre>kubectl describe pod &lt;pod-name&gt;<br><em>or</em><br>kubectl describe pod/&lt;pod-name&gt;</pre>\n<pre>kubectl describe svc &lt;service-name&gt;<br><em>or<br></em>kubectl describe svc/&lt;service-name&gt;</pre>\n<p><strong>Github repository (on branch ‘pods’):</strong></p>\n<p><a href=\"https://github.com/SharmilaS22/medium-k8s-pods/tree/pods\">GitHub - SharmilaS22/medium-k8s-pods at pods</a></p>\n<p>Happy learning!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=61b33672dfec\" width=\"1\" height=\"1\" alt=\"\">\n",
            "content": "\n<p>This article guides you through creating and deploying a pod along with a service to a Kubernetes cluster in your local system.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*XkbFsZzTC2lqe6GaKFDaQw.gif\"></figure><h4>System Pre-requisites</h4>\n<ul>\n<li>Docker</li>\n<li>Minikube</li>\n</ul>\n<h4>Pods</h4>\n<ul>\n<li>Pods are the smallest deployable units in Kubernetes.</li>\n<li>A pod has a container running in it. <em>(In some cases, a pod might contain more than one container).</em>\n</li>\n<li>Apps can be scaled by spinning up more pods <em>(not by running more containers in a single pod).</em>\n</li>\n<li>Each pod is assigned a private IP address.</li>\n<li>A <strong>node</strong> can have multiple pods.</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*DyCVWwaNdEM79muWT0qXZg.png\"></figure><p>Applications should be containerised to deploy to a pod.</p>\n<p>In this article, we will deploy the docker image of a simple hello world application. This app is built using node.js.</p>\n<blockquote>If you are not familiar with docker, <a href=\"https://medium.com/featurepreneur/a-guide-to-dockerize-your-node-js-application-c24b5e129995\">this article</a> will guide you in the process of creating a docker image of a node application.</blockquote>\n<p>The docker image used in this article is published to dockerhub. So, you can easily use it to follow along with the tutorial. If you already have a docker image ready to be deployed, you can also go ahead with that.</p>\n<blockquote>Dockerhub— where users can create their own private/public repositories to contain their images and also can access any open-source image.</blockquote>\n<h3>Configuring the Pod</h3>\n<p>Kubernetes includes a <em>container runtime</em> (eg. docker). The <em>container runtime</em> will spin up a container from the image that we provide.</p>\n<blockquote>If minikube is not installed in your system, visit <a href=\"https://kubernetes.io/docs/tasks/tools/\">this site to download it</a>.</blockquote>\n<ul><li>Start minikube in your system using the command below in your terminal.</li></ul>\n<pre>minikube start</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*80Q2brHAzC9m4Pxfo2oqMw.png\"><figcaption>minikube start</figcaption></figure><ul><li>The next step is to create a YAML file to hold the configurations for our pod. Let’s name it pod.yaml and add the following.</li></ul>\n<a href=\"https://medium.com/media/1260faf6fbd899372fec4371b66bf991/href\">https://medium.com/media/1260faf6fbd899372fec4371b66bf991/href</a><p>We have some pre-defined fields for configuring our pod. We can have a glance at these specifications by typing kubectl explain pod in the terminal.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*YKr8cmcuZaUG0h3femm0hA.png\"></figure><p>This informs us that, for the pod configuration, the version is v1 and the kind is Pod . It also displays a brief explanation of the required fields for configuring pods. To learn more, visit <a href=\"https://kubernetes.io/docs/concepts/workloads/pods/\">here</a>.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/841/1*aKv6tlJSjVgFiah5sp_AXg.png\"></figure><p>Now, let’s look into each line of our YAML file.</p>\n<pre>apiVersion: v1<br>kind: Pod</pre>\n<p>The above two statements in the file describe the version and the kind of configuration. (As we just learnt that for a pod, the apiVersion should be ‘v1’ and the kind should be ‘Pod’)</p>\n<pre>metadata:<br>  - name: pod-demo<br>    labels:<br>      app: hello-world</pre>\n<p>The ‘metadata’ field is used to provide the ‘name’ and ‘labels’ for the pod.</p>\n<p>Here, the name of our pod is pod-demo and it has a label app: hello-world. Labels are useful in filtering out certain pods from all the pods in a namespace.</p>\n<pre>spec:<br>  containers:<br>    - name: hello-world<br>      image: sharmilas22/hello-world-app:latest<br>      ports:<br>        - containerPort: 4000</pre>\n<p>Under the spec option, we can mention the specifications of the <em>containers</em> that will run inside the pod. Here, we specify that a container with the name hello-world should be spun up using the image sharmilas22/hello-world-app:latest (this image will be pulled from dockerhub to your system)</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*TpD4-bDDK9WQV7k1wMyt3A.png\"><figcaption>image in dockerhub</figcaption></figure><p>Along with these data, we also mention the port where our app would be running (4000).</p>\n<ul><li>Once we made the YAML file ready, our next step would be to apply them using,</li></ul>\n<pre>kubectl apply -f pod.yaml</pre>\n<blockquote>-f option is used to specify the file path (here, ‘pod.yaml’).</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/944/1*AinyR-uhcof3jrAymBV51Q.png\"><figcaption>apply pod.yaml</figcaption></figure><p>Our pod is now created. We can view all the pods in our system using,</p>\n<pre>kubectl get pods </pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/852/1*o8f3rwO4dKSSp7MorZT2MQ.png\"><figcaption>Pod running</figcaption></figure><blockquote>The status of our pod is ‘Running’, which means our pod is up and running. <br>If you see ‘ContainerCreating’ as the status, it means that the pod is now getting created and will be up when it’s done.</blockquote>\n<blockquote>Learn more about the pod status, <a href=\"https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#pod-phase\">here</a>.</blockquote>\n<p>The -o wide option is used with the above command to view more information about the running pods.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*TLIqMpSh9DxcyU4UqAuvsw.png\"><figcaption>-o wide option</figcaption></figure><p>We can see that the IP assigned to the pod is ‘172.17.0.2’ and minikube is the node where the pod is running.</p>\n<p>The IP address of the pod can be used to access them from the kubernetes network.</p>\n<p>Let’s try to access our pod from the minikube network. Type the following command, to enter into the minikube in command mode.</p>\n<pre>minikube ssh</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*AQuAZ13aIJ8p1MHdrnavDA.png\"></figure><p>Once we enter into the minikube in command mode, we request to the pod IP (<em>the IP assigned to our pod is 172.17.0.2, we can view it using</em><em> kubectl get pods -o wide</em> as we saw earlier) with the app port (<em>4000</em>).</p>\n<pre>curl http://&lt;IP-of-your-pod&gt;:4000</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/684/1*elXPbF2xne1OxhduvOxqog.png\"></figure><p>We could able to access and get a response from the app! Congratulations! We deployed our pod to the Kubernetes cluster successfully!!</p>\n<p>But our job is not over yet.</p>\n<p>Our pod is deployed and running, but not exposed to our local system, i.e. we cannot be able to access it from outside the minikube (from our local system).</p>\n<p>We need a kubernetes ‘service’ to allow us to connect to our pods from outside the kubernetes network.</p>\n<h4>Let’s create a Service for our pod</h4>\n<ul><li>Create a new file called ‘service.yaml’ and add the following,</li></ul>\n<a href=\"https://medium.com/media/29c389928744c66479aa96a4693ad4ac/href\">https://medium.com/media/29c389928744c66479aa96a4693ad4ac/href</a><p>Similar to a pod, we can use kubectl explain service to have a quick look at the fields needed for our configuration. Our service config file should have the apiVersion as ‘v1’ and kind as ‘Service’.</p>\n<blockquote>Learn more about service <a href=\"https://kubernetes.io/docs/concepts/services-networking/service/\">here</a>.</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*EOmJ_buYiVqAlvCR-l0g6w.png\"><figcaption>service</figcaption></figure><p>We are also specifying a name for our service (here, ‘service-demo’) using the metadata field.</p>\n<pre>metadata:<br>  name: service-demo</pre>\n<p>In spec , we define three fields: <em>type</em>, <em>selector</em> and <em>ports</em>.</p>\n<pre>spec:<br>  type: NodePort<br>  selector:<br>    app: hello-world<br>  ports:<br>  - protocol: TCP<br>    port: 80<br>    targetPort: 4000<br>    nodePort: 30001</pre>\n<p><strong>type</strong> — This field is used to specify the type of the service. The service type would define how the service is exposed. There are 4 valid options: <em>ClusterIP</em>, <em>NodePort</em>, <em>ExternalName</em> and <em>LoadBalancer</em>.</p>\n<blockquote>\n<em>ClusterIP</em> —(default) Exposes the service within the cluster where it’s present.</blockquote>\n<blockquote>\n<em>NodePort</em> — Exposes the service on the nodeIP and nodePort. Can be accessible outside the cluster.</blockquote>\n<blockquote>\n<em>LoadBalancer</em> — Exposes the service to an external load balancer (eg., aws Elastic Load Balancer).</blockquote>\n<blockquote>\n<em>ExternalName</em> — Aliases the service to the specified externalName.<br><br>Learn more <a href=\"https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types\">here</a>.</blockquote>\n<p>Here, our service will be of type <em>NodePort</em>.</p>\n<p><strong>selector</strong> — This field is used to map the pods to the service using <em>labels</em>. Here, we have the selector as app: hello-world , so this service will open traffic to any pod that is running with this particular label. (Remember that we provided this exact label to our pod while configuring it)</p>\n<p><strong>ports</strong> — We define a port with the TCP protocol and port 80.</p>\n<ul>\n<li>\n<em>The targetPort</em> is the port where our container is running (here, our container port is 4000).</li>\n<li>The<em> nodePort</em> is the port where we want our service to be exposed. The port number to be specified should be in the range of 30000 to 32767 (Here, we gave 30001 as our node port). Using the <em>nodePort</em> and the <em>nodeIP</em>, we can access our service from outside the cluster.</li>\n</ul>\n<p>Let’s apply the <em>service.yaml</em> to create our service,</p>\n<pre>kubectl apply -f service.yaml</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*UIpK1o27TQ-pQD78cGY6jw.png\"></figure><p>Our service is deployed now.</p>\n<p>To view all the objects(pods, services etc) in the kubernetes network, we can use kubectl get all command.</p>\n<pre>kubectl get all</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*MonQUiLzbrNGGldDc8oQug.png\"><figcaption>kubectl get all</figcaption></figure><p>Now, we can see that our service ‘service-demo’ is running.</p>\n<p>The URL of the service is used to access our pod from outside the kubernetes cluster. Let us get the URL for our service using,</p>\n<pre>minikube service &lt;service-name&gt; --url</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*5g_D6cvJzfy6soJ6_imOpw.png\"></figure><p>Let’s try to access the URL from our system.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*TcRutnbhe3vlXc3D2r0u7g.png\"></figure><p>Congratulations! We have successfully deployed our pod and connected it to a service to access it!</p>\n<p>Let’s try to understand the URL.</p>\n<pre>http://192.168.64.2:30001</pre>\n<p>In this URL ‘192.168.64.2’ is the node IP and ‘30001’ is the node port.</p>\n<blockquote>We know that the node port is 30001 since we provided it in the service configuration.</blockquote>\n<h4>But what does the IP address mean?</h4>\n<p>Since we are running kubernetes on our local system, the minikube is the only node running in our kubernetes cluster. (We can view all the nodes by kubectl get nodes )</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*bFHqFVaNuc-1A9lbLGQrtg.png\"></figure><p>Our pod is running in the minikube node. Hence, the node IP for our service is the IP address of the minikube which could be viewed by,</p>\n<pre>minikube ip</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/776/1*C99G_Xi61V8ZT9WqsCA4cw.png\"><figcaption>nodeIP</figcaption></figure><p>We can also look into the details of our pod to know that it is running in the minikube node. The command ‘kubectl describe pod pod-demo’ gives us all the necessary information about our pod ‘pod-demo’.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Vfd1ZUKsc6TqCZ-rlh4Eqw.png\"></figure><p>From the above picture, we can understand that our pod is running in the node ‘minikube’ which has the IP 192.168.64.2. And this is the reason for our service to have this IP address.</p>\n<h3>Some useful Kubectl commands</h3>\n<ul><li>To view all the pods/services,</li></ul>\n<pre>kubectl get pods</pre>\n<pre>kubectl get services </pre>\n<ul><li>To delete pods/services,</li></ul>\n<pre>kubectl delete pod &lt;pod-name&gt;<br><em>or</em><br>kubectl delete pod/&lt;pod-name&gt;</pre>\n<pre>kubectl delete svc &lt;service-name&gt;<br><em>or</em><br>kubectl delete svc/&lt;service-name&gt;</pre>\n<ul><li>To view information about a particular pod or a service,</li></ul>\n<pre>kubectl describe pod &lt;pod-name&gt;<br><em>or</em><br>kubectl describe pod/&lt;pod-name&gt;</pre>\n<pre>kubectl describe svc &lt;service-name&gt;<br><em>or<br></em>kubectl describe svc/&lt;service-name&gt;</pre>\n<p><strong>Github repository (on branch ‘pods’):</strong></p>\n<p><a href=\"https://github.com/SharmilaS22/medium-k8s-pods/tree/pods\">GitHub - SharmilaS22/medium-k8s-pods at pods</a></p>\n<p>Happy learning!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=61b33672dfec\" width=\"1\" height=\"1\" alt=\"\">\n",
            "enclosure": {},
            "categories": [
                "kubernetes",
                "devops",
                "technology",
                "docker"
            ]
        },
        {
            "title": "Get Started with RabbitMQ in Node.js",
            "pubDate": "2022-01-28 15:22:29",
            "link": "https://sharmilas.medium.com/get-started-with-rabbitmq-in-node-js-1adb18d019d0?source=rss-5da727287624------2",
            "guid": "https://medium.com/p/1adb18d019d0",
            "author": "Sharmila S",
            "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*_YHEfUPfTuTvfhVnm4aeLw.gif",
            "description": "\n<p>In this article, we are going to connect two node.js applications with a queue using RabbitMQ.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*_YHEfUPfTuTvfhVnm4aeLw.gif\"><figcaption>Image by Author</figcaption></figure><p>RabbitMQ is an open-source message broker software.</p>\n<blockquote>Message Broker is the intermediary agent between provider and client(s) that makes sure the message is not lost. <br>Some alternatives: Apache Kafka, Amazon Kinesis etc.</blockquote>\n<p>RabbitMQ implements AMQP (Advanced Message Queuing Protocol). AMQP is a protocol that helps in communication between services using messages.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*u2yjeAk_7Yhq9kHGwy0OWg.gif\"><figcaption>RabbitMQ</figcaption></figure><h3>Installation</h3>\n<p>If RabbitMQ is not installed in your system, install it from <a href=\"https://www.rabbitmq.com/download.html\">here</a> based on your platform or you can use <a href=\"https://registry.hub.docker.com/_/rabbitmq/\">this</a> docker image.</p>\n<p>I will be using the <strong>RabbitMQ docker image </strong>to run the RabbitMQ server locally. If you are familiar with docker, you can run the following command to run the RabbitMQ server in your system.</p>\n<pre>docker run -it --rm --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3.9-management</pre>\n<p>Our server is running at port 5672 and it is ready to connect to services.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*6GzY7OJTMjWqP1OKMq-5ug.png\"><figcaption>RabbitMQ running</figcaption></figure><blockquote>This article guides you step-by-step with code snippets. For the full code, visit the Github repository link at the end of this article.</blockquote>\n<h3>Creating Node app 1 (Provider)</h3>\n<p>Let's create a node.js app that will act as the provider. The role of the provider here is to send a message to the queue from where it reaches the client. (To get started with node.js, click <a href=\"https://medium.com/featurepreneur/develop-a-backend-server-for-your-application-using-express-29deeae40ed1\">here</a>)</p>\n<h4>Steps:</h4>\n<ol>\n<li>Create a node.js app using express.</li>\n<li>Connect to the queue using the amqplib module.</li>\n<li>Define an API to send a message to the queue(for testing).</li>\n</ol>\n<h4>1. Start with a simple Node app</h4>\n<p>Let's create a simple node application and make it listen to port 4001 .</p>\n<ul><li>Create a new project folder and initialise npm in it.</li></ul>\n<pre>$ mkdir provider-app</pre>\n<pre>$ cd provider-app</pre>\n<pre>$ npm init</pre>\n<ul><li>Install the required modules:</li></ul>\n<pre>$ npm i express amqplib</pre>\n<blockquote>express -&gt; to create a node.js application. <br>amqplib -&gt; to create a message broker.</blockquote>\n<ul><li>Create index.js file and add the following,</li></ul>\n<pre>const express = require(\"express\");<br>const app = express();<br>const PORT = process.env.PORT || 4001;</pre>\n<pre>app.use(express.json());</pre>\n<pre>app.get(\"/send-msg\", (req, res) =&gt; {<br>    res.send(\"Hello world\")<br>});</pre>\n<pre>app.listen(PORT, () =&gt; console.log(\"Server running at port \" + PORT));</pre>\n<p>Notice that we define a route /send-msg here, which we will be using later to send a message to the queue upon an API request.</p>\n<h4>2. Connection to the queue</h4>\n<ul><li>Import amqplib module in the index.js file.</li></ul>\n<pre>const amqp = require(\"amqplib\");</pre>\n<ul><li>Let’s wrap our connection code in an <em>async</em> function since we need to work with promises in the code.</li></ul>\n<blockquote>(If you are unfamiliar with <em>async/await</em> and other js concepts, click <a href=\"https://medium.com/featurepreneur/6-must-know-javascript-es6-concepts-6bbf1b448228\">here</a> to get a quick overview of some of the must-know javascript concepts)</blockquote>\n<pre>var channel, connection;  <em>//global variables</em></pre>\n<pre>async function connectQueue() {   <br>    try {</pre>\n<pre>        connection = await amqp.<strong>connect</strong>(\"amqp://localhost:5672\");<br>        channel    = await connection.<strong>createChannel</strong>()<br><br>        await channel.<strong>assertQueue</strong>(\"test-queue\")<br><br>    } catch (error) {<br>        console.log(error)<br>    }<br>}</pre>\n<p>Let’s take a look at the code that connects to the RabbitMQ server.</p>\n<blockquote><em>connection = await amqp.connect(“amqp://localhost:5672”)<br>channel = await connection.createChannel()</em></blockquote>\n<ul>\n<li>Using the connect() method, we make a connection to the server which is running at port 5672.</li>\n<li>We create a channel from the connection using which we can access the queues. (To understand more about connections and channels, visit this <a href=\"https://stackoverflow.com/questions/18418936/rabbitmq-and-relationship-between-channel-and-connection#18419417\">link</a>.)</li>\n</ul>\n<blockquote><em>await channel.assertQueue(“test-queue”)</em></blockquote>\n<ul><li>In the above line, we check for a queue named <em>‘test-queue’.</em> If that queue does not exist, a new queue is created with the provided name (here, ‘test-queue’).</li></ul>\n<p>Then, call the connectQueue function to initiate a connection when our app starts.</p>\n<pre>connectQueue()</pre>\n<ul><li>Let’s define another async function, which can be used to send a message to the queue.</li></ul>\n<pre><strong>async function sendData (data) {</strong></pre>\n<pre>    <em>// send data to queue</em><br><strong>    await channel.sendToQueue(\"test-queue\", Buffer.from(JSON.stringify(data)));<br></strong>        <br><em>// close the channel and connection</em><br><strong>await channel.close();<br>    await connection.close();</strong> <br><strong>}</strong></pre>\n<ul>\n<li>We pass the message to this <em>sendData</em> function using function parameters.</li>\n<li>The channel.sendToQueue() method is used to send the message to the specified queue. It takes two parameters, the name of the queue and the message to be sent.</li>\n</ul>\n<h4>3. Define an API for sending a message to the queue (for testing).</h4>\n<ul><li>Let’s modify the route ‘/send-msg’ to send a message to the queue when it is called. We use the function sendData() (which we defined earlier) to pass the message.</li></ul>\n<pre>app.get(\"/send-msg\", (req, res) =&gt; {<br><br><em>// data to be sent</em><br>    const <strong>data</strong> = {<br>        title  : \"Six of Crows\",<br>        author : \"Leigh Burdugo\"<br>    }</pre>\n<pre>    <strong>sendData</strong>(data);  // pass the data to the function we defined</pre>\n<pre>    console.log(\"A message is sent to queue\")<br>    res.send(\"Message Sent\"); //response to the API request<br><br>})</pre>\n<h3>Creating Node app 2 (Client)</h3>\n<p>Now, we create another node.js app that connects to the queue and acknowledges the message from the queue.</p>\n<h4>Firstly, a simple express app</h4>\n<pre>$ mkdir client-app</pre>\n<pre>$ cd client-app</pre>\n<pre>$ npm init</pre>\n<p>Create index.js file and add the following,</p>\n<pre>const express = require(\"express\");<br>const app = express();<br>const PORT = process.env.PORT || 4002;</pre>\n<pre>app.use(express.json());</pre>\n<pre>app.listen(PORT, () =&gt; console.log(\"Server running at port \" + PORT));</pre>\n<blockquote>The client-app runs on port 4002.</blockquote>\n<h4>Connection to the ‘test-queue’</h4>\n<p>We make a connection to the test-queue in the same way as we did in the ‘provider-app’. Then, we <em>consume</em> the data from the queue and <em>acknowledge</em> it.</p>\n<pre>const amqp = require(\"amqplib\");<br>var channel, connection;</pre>\n<pre>connectQueue()  <em>// call the connect function</em><br><br>async function connectQueue() {<br>    try {</pre>\n<pre>        connection = await amqp.<strong>connect</strong>(\"amqp://localhost:5672\");<br>        channel    = await connection.<strong>createChannel</strong>()<br><br>        await channel.<strong>assertQueue</strong>(\"test-queue\")<br><br>        channel.<strong>consume</strong>(\"test-queue\", <strong>data</strong> =&gt; {</pre>\n<pre>            console.log(`${Buffer.from(data.content)}`);<br>            channel.<strong>ack</strong>(data);</pre>\n<pre>        })</pre>\n<pre>    } catch (error) {<br>        console.log(error);<br>    }<br>}</pre>\n<p>The message from the queue is read using the consume() method. It takes the name of the queue ( here, ‘test-queue’ ) as a parameter and returns the message from the queue as a callback.</p>\n<blockquote>channel.consume(“test-queue”, data =&gt; {<br> console.log(`${Buffer.from(data.content)}`);<br> channel.ack(data);<br>})</blockquote>\n<p>The channel.ack() function is used to acknowledge that the particular message has been received by the ‘client-app’.</p>\n<h3>Testing</h3>\n<p>Let’s try to send a message from the <em>provider</em> service to the <em>client </em>service<em>.</em></p>\n<ul><li>Go to the terminal, run the provider app using,</li></ul>\n<pre>$ cd provider-app</pre>\n<pre>$ node index.js</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/670/1*I9mr09-g1OWEgyTU5gEwEQ.png\"></figure><ul><li>Run the client application in another terminal.</li></ul>\n<pre>$ cd client-app</pre>\n<pre>$ node index.js</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/634/1*iyANwuSKsc3cYSQ63_2u1Q.png\"></figure><p>Now, let’s try to send a message from the provider app. Our provider app is running at <a href=\"http://localhost:4001/\">http://localhost:4001</a>. When the route ‘/send-msg’ is called, the message will be sent to the queue.</p>\n<p>Since it’s a GET request, I’m just going to enter the URL in the browser, you can also use tools like <a href=\"https://www.postman.com/\">Postman</a> to send the request.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/826/1*NYoWhS4eQiyzX_GXvVdDiA.png\"><figcaption>Request to /send-msg</figcaption></figure><p>Let’s look at the console now.</p>\n<ul><li>provider-app</li></ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/906/1*t1oIxGgtGOh1iaQVqY8ulg.png\"><figcaption>Provider sending message to the queue</figcaption></figure><ul><li>client-app</li></ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Rf3ZlYSnVsbSYRN5fIlSLQ.png\"><figcaption>Client displaying the message from the queue</figcaption></figure><p>The message has been sent from one service to another, using a queue. We now implemented a simple queueing service using RabbitMQ in nodejs.</p>\n<p>GitHub link — <a href=\"https://github.com/SharmilaS22/medium-rabbitmq-nodejs\">https://github.com/SharmilaS22/medium-rabbitmq-nodejs</a></p>\n<p>Hope this article helped to get started with RabbitMQ! Happy learning!</p>\n<p>If you liked my article, feel free to buy me a coffee <a href=\"https://www.buymeacoffee.com/sharmilas\">here</a>.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Nh1owl6a3HdaRB_Y0y04pw.png\"><figcaption><a href=\"https://www.buymeacoffee.com/sharmilas\">https://www.buymeacoffee.com/sharmilas</a></figcaption></figure><img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=1adb18d019d0\" width=\"1\" height=\"1\" alt=\"\">\n",
            "content": "\n<p>In this article, we are going to connect two node.js applications with a queue using RabbitMQ.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*_YHEfUPfTuTvfhVnm4aeLw.gif\"><figcaption>Image by Author</figcaption></figure><p>RabbitMQ is an open-source message broker software.</p>\n<blockquote>Message Broker is the intermediary agent between provider and client(s) that makes sure the message is not lost. <br>Some alternatives: Apache Kafka, Amazon Kinesis etc.</blockquote>\n<p>RabbitMQ implements AMQP (Advanced Message Queuing Protocol). AMQP is a protocol that helps in communication between services using messages.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*u2yjeAk_7Yhq9kHGwy0OWg.gif\"><figcaption>RabbitMQ</figcaption></figure><h3>Installation</h3>\n<p>If RabbitMQ is not installed in your system, install it from <a href=\"https://www.rabbitmq.com/download.html\">here</a> based on your platform or you can use <a href=\"https://registry.hub.docker.com/_/rabbitmq/\">this</a> docker image.</p>\n<p>I will be using the <strong>RabbitMQ docker image </strong>to run the RabbitMQ server locally. If you are familiar with docker, you can run the following command to run the RabbitMQ server in your system.</p>\n<pre>docker run -it --rm --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3.9-management</pre>\n<p>Our server is running at port 5672 and it is ready to connect to services.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*6GzY7OJTMjWqP1OKMq-5ug.png\"><figcaption>RabbitMQ running</figcaption></figure><blockquote>This article guides you step-by-step with code snippets. For the full code, visit the Github repository link at the end of this article.</blockquote>\n<h3>Creating Node app 1 (Provider)</h3>\n<p>Let's create a node.js app that will act as the provider. The role of the provider here is to send a message to the queue from where it reaches the client. (To get started with node.js, click <a href=\"https://medium.com/featurepreneur/develop-a-backend-server-for-your-application-using-express-29deeae40ed1\">here</a>)</p>\n<h4>Steps:</h4>\n<ol>\n<li>Create a node.js app using express.</li>\n<li>Connect to the queue using the amqplib module.</li>\n<li>Define an API to send a message to the queue(for testing).</li>\n</ol>\n<h4>1. Start with a simple Node app</h4>\n<p>Let's create a simple node application and make it listen to port 4001 .</p>\n<ul><li>Create a new project folder and initialise npm in it.</li></ul>\n<pre>$ mkdir provider-app</pre>\n<pre>$ cd provider-app</pre>\n<pre>$ npm init</pre>\n<ul><li>Install the required modules:</li></ul>\n<pre>$ npm i express amqplib</pre>\n<blockquote>express -&gt; to create a node.js application. <br>amqplib -&gt; to create a message broker.</blockquote>\n<ul><li>Create index.js file and add the following,</li></ul>\n<pre>const express = require(\"express\");<br>const app = express();<br>const PORT = process.env.PORT || 4001;</pre>\n<pre>app.use(express.json());</pre>\n<pre>app.get(\"/send-msg\", (req, res) =&gt; {<br>    res.send(\"Hello world\")<br>});</pre>\n<pre>app.listen(PORT, () =&gt; console.log(\"Server running at port \" + PORT));</pre>\n<p>Notice that we define a route /send-msg here, which we will be using later to send a message to the queue upon an API request.</p>\n<h4>2. Connection to the queue</h4>\n<ul><li>Import amqplib module in the index.js file.</li></ul>\n<pre>const amqp = require(\"amqplib\");</pre>\n<ul><li>Let’s wrap our connection code in an <em>async</em> function since we need to work with promises in the code.</li></ul>\n<blockquote>(If you are unfamiliar with <em>async/await</em> and other js concepts, click <a href=\"https://medium.com/featurepreneur/6-must-know-javascript-es6-concepts-6bbf1b448228\">here</a> to get a quick overview of some of the must-know javascript concepts)</blockquote>\n<pre>var channel, connection;  <em>//global variables</em></pre>\n<pre>async function connectQueue() {   <br>    try {</pre>\n<pre>        connection = await amqp.<strong>connect</strong>(\"amqp://localhost:5672\");<br>        channel    = await connection.<strong>createChannel</strong>()<br><br>        await channel.<strong>assertQueue</strong>(\"test-queue\")<br><br>    } catch (error) {<br>        console.log(error)<br>    }<br>}</pre>\n<p>Let’s take a look at the code that connects to the RabbitMQ server.</p>\n<blockquote><em>connection = await amqp.connect(“amqp://localhost:5672”)<br>channel = await connection.createChannel()</em></blockquote>\n<ul>\n<li>Using the connect() method, we make a connection to the server which is running at port 5672.</li>\n<li>We create a channel from the connection using which we can access the queues. (To understand more about connections and channels, visit this <a href=\"https://stackoverflow.com/questions/18418936/rabbitmq-and-relationship-between-channel-and-connection#18419417\">link</a>.)</li>\n</ul>\n<blockquote><em>await channel.assertQueue(“test-queue”)</em></blockquote>\n<ul><li>In the above line, we check for a queue named <em>‘test-queue’.</em> If that queue does not exist, a new queue is created with the provided name (here, ‘test-queue’).</li></ul>\n<p>Then, call the connectQueue function to initiate a connection when our app starts.</p>\n<pre>connectQueue()</pre>\n<ul><li>Let’s define another async function, which can be used to send a message to the queue.</li></ul>\n<pre><strong>async function sendData (data) {</strong></pre>\n<pre>    <em>// send data to queue</em><br><strong>    await channel.sendToQueue(\"test-queue\", Buffer.from(JSON.stringify(data)));<br></strong>        <br><em>// close the channel and connection</em><br><strong>await channel.close();<br>    await connection.close();</strong> <br><strong>}</strong></pre>\n<ul>\n<li>We pass the message to this <em>sendData</em> function using function parameters.</li>\n<li>The channel.sendToQueue() method is used to send the message to the specified queue. It takes two parameters, the name of the queue and the message to be sent.</li>\n</ul>\n<h4>3. Define an API for sending a message to the queue (for testing).</h4>\n<ul><li>Let’s modify the route ‘/send-msg’ to send a message to the queue when it is called. We use the function sendData() (which we defined earlier) to pass the message.</li></ul>\n<pre>app.get(\"/send-msg\", (req, res) =&gt; {<br><br><em>// data to be sent</em><br>    const <strong>data</strong> = {<br>        title  : \"Six of Crows\",<br>        author : \"Leigh Burdugo\"<br>    }</pre>\n<pre>    <strong>sendData</strong>(data);  // pass the data to the function we defined</pre>\n<pre>    console.log(\"A message is sent to queue\")<br>    res.send(\"Message Sent\"); //response to the API request<br><br>})</pre>\n<h3>Creating Node app 2 (Client)</h3>\n<p>Now, we create another node.js app that connects to the queue and acknowledges the message from the queue.</p>\n<h4>Firstly, a simple express app</h4>\n<pre>$ mkdir client-app</pre>\n<pre>$ cd client-app</pre>\n<pre>$ npm init</pre>\n<p>Create index.js file and add the following,</p>\n<pre>const express = require(\"express\");<br>const app = express();<br>const PORT = process.env.PORT || 4002;</pre>\n<pre>app.use(express.json());</pre>\n<pre>app.listen(PORT, () =&gt; console.log(\"Server running at port \" + PORT));</pre>\n<blockquote>The client-app runs on port 4002.</blockquote>\n<h4>Connection to the ‘test-queue’</h4>\n<p>We make a connection to the test-queue in the same way as we did in the ‘provider-app’. Then, we <em>consume</em> the data from the queue and <em>acknowledge</em> it.</p>\n<pre>const amqp = require(\"amqplib\");<br>var channel, connection;</pre>\n<pre>connectQueue()  <em>// call the connect function</em><br><br>async function connectQueue() {<br>    try {</pre>\n<pre>        connection = await amqp.<strong>connect</strong>(\"amqp://localhost:5672\");<br>        channel    = await connection.<strong>createChannel</strong>()<br><br>        await channel.<strong>assertQueue</strong>(\"test-queue\")<br><br>        channel.<strong>consume</strong>(\"test-queue\", <strong>data</strong> =&gt; {</pre>\n<pre>            console.log(`${Buffer.from(data.content)}`);<br>            channel.<strong>ack</strong>(data);</pre>\n<pre>        })</pre>\n<pre>    } catch (error) {<br>        console.log(error);<br>    }<br>}</pre>\n<p>The message from the queue is read using the consume() method. It takes the name of the queue ( here, ‘test-queue’ ) as a parameter and returns the message from the queue as a callback.</p>\n<blockquote>channel.consume(“test-queue”, data =&gt; {<br> console.log(`${Buffer.from(data.content)}`);<br> channel.ack(data);<br>})</blockquote>\n<p>The channel.ack() function is used to acknowledge that the particular message has been received by the ‘client-app’.</p>\n<h3>Testing</h3>\n<p>Let’s try to send a message from the <em>provider</em> service to the <em>client </em>service<em>.</em></p>\n<ul><li>Go to the terminal, run the provider app using,</li></ul>\n<pre>$ cd provider-app</pre>\n<pre>$ node index.js</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/670/1*I9mr09-g1OWEgyTU5gEwEQ.png\"></figure><ul><li>Run the client application in another terminal.</li></ul>\n<pre>$ cd client-app</pre>\n<pre>$ node index.js</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/634/1*iyANwuSKsc3cYSQ63_2u1Q.png\"></figure><p>Now, let’s try to send a message from the provider app. Our provider app is running at <a href=\"http://localhost:4001/\">http://localhost:4001</a>. When the route ‘/send-msg’ is called, the message will be sent to the queue.</p>\n<p>Since it’s a GET request, I’m just going to enter the URL in the browser, you can also use tools like <a href=\"https://www.postman.com/\">Postman</a> to send the request.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/826/1*NYoWhS4eQiyzX_GXvVdDiA.png\"><figcaption>Request to /send-msg</figcaption></figure><p>Let’s look at the console now.</p>\n<ul><li>provider-app</li></ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/906/1*t1oIxGgtGOh1iaQVqY8ulg.png\"><figcaption>Provider sending message to the queue</figcaption></figure><ul><li>client-app</li></ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Rf3ZlYSnVsbSYRN5fIlSLQ.png\"><figcaption>Client displaying the message from the queue</figcaption></figure><p>The message has been sent from one service to another, using a queue. We now implemented a simple queueing service using RabbitMQ in nodejs.</p>\n<p>GitHub link — <a href=\"https://github.com/SharmilaS22/medium-rabbitmq-nodejs\">https://github.com/SharmilaS22/medium-rabbitmq-nodejs</a></p>\n<p>Hope this article helped to get started with RabbitMQ! Happy learning!</p>\n<p>If you liked my article, feel free to buy me a coffee <a href=\"https://www.buymeacoffee.com/sharmilas\">here</a>.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Nh1owl6a3HdaRB_Y0y04pw.png\"><figcaption><a href=\"https://www.buymeacoffee.com/sharmilas\">https://www.buymeacoffee.com/sharmilas</a></figcaption></figure><img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=1adb18d019d0\" width=\"1\" height=\"1\" alt=\"\">\n",
            "enclosure": {},
            "categories": [
                "javascript",
                "nodejs",
                "devops",
                "technology"
            ]
        },
        {
            "title": "Download files for the client from the Node.js server using this quick way",
            "pubDate": "2021-11-30 13:59:10",
            "link": "https://sharmilas.medium.com/download-files-for-the-client-from-the-node-js-server-using-this-quick-way-d35c527f5e48?source=rss-5da727287624------2",
            "guid": "https://medium.com/p/d35c527f5e48",
            "author": "Sharmila S",
            "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*B8LBO7W3usbO0RVbjjc2mg.gif",
            "description": "\n<p>Add a download option for files on your Node.js web application for users to download them to their local filesystem.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*B8LBO7W3usbO0RVbjjc2mg.gif\"></figure><p><strong>System Requirements: </strong>npm, node.js</p>\n<p>Using Express (framework of node.js), it is easier to download files for users. If you are new to <em>express</em>, refer to the link below to get started.</p>\n<p><a href=\"https://medium.com/featurepreneur/develop-a-backend-server-for-your-application-using-express-29deeae40ed1\">Develop a Backend Server for your application using Express</a></p>\n<h4>Set up the project</h4>\n<ul><li>Create a new directory</li></ul>\n<pre>$ mkdir download-test</pre>\n<pre>$ cd download-test</pre>\n<ul><li>Initiate npm and install the express module.</li></ul>\n<pre>$ npm init</pre>\n<pre>$ npm i express</pre>\n<ul>\n<li>Create an index.js file.</li>\n<li>Create a directory ‘public’ with a sub-directory ‘assets’, save the file that you need to download in the assets folder (here, ‘book.png’).</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/237/1*ZlbMLaCA9bwS5C71NXW1og.png\"><figcaption>Folder Structure</figcaption></figure><ul><li>Add the following code in index.js</li></ul>\n<pre>const <strong>express</strong> = require(\"express\")<br>const <strong>app</strong> = express();</pre>\n<pre>const <strong>PORT</strong> = 3000;</pre>\n<pre><em>// <br>// GET </em><a href=\"http://localhost:3000/download/book.png\"><em>http://localhost:3000/download/book.png</em></a><em><br>//<br></em>app.<strong>get</strong>(\"/download/:filename\", (req, res) =&gt; {</pre>\n<pre>    const <strong>filePath</strong> = __dirname + \"/public/assets/\" + req.params.filename;</pre>\n<pre>    res.<strong>download</strong>(<br>        filePath, <br>        \"downloaded-book.png\", <em>// Remember to include file extension</em><br>        (err) =&gt; {</pre>\n<pre>            <strong>if</strong> (err) {<br>                res.<strong>send</strong>({<br>                    error : err,<br>                    msg   : \"Problem downloading the file\"<br>                })<br>            }</pre>\n<pre>    });<br>});</pre>\n<pre>app.<strong>listen</strong>( PORT, () =&gt; console.log(\"Server listening to port \" + PORT))</pre>\n<h4>Code Explanation</h4>\n<p>We define an API with the endpoint “download/:filename” for the GET method. When a request is sent, the file that is mentioned in the URL will be downloaded.</p>\n<p>Let’s look at the API definition.</p>\n<pre>app.<strong>get</strong>(\"/download/:filename\", (req, res) =&gt; { </pre>\n<pre>    const <strong>filePath</strong> = __dirname + \"/public/assets/\" + req.params.filename;</pre>\n<pre>    res.<strong>download</strong>(<br>        filePath, <br>        \"downloaded-book.png\", <em>// Remember to include file extension</em><br>        (err) =&gt; {</pre>\n<pre><strong>            if</strong> (err) {<br>                res.<strong>send</strong>({<br>                    error : err,<br>                    msg   : \"Problem downloading the file\"<br>                })<br>            }</pre>\n<pre>    });<br>});</pre>\n<blockquote>filepath -&gt; variable to hold the full path of the file which will be downloaded.</blockquote>\n<blockquote>req.params.filename -&gt; to obtain the name of the file to be downloaded from URL parameter. Eg. in \"/download/book.png” , the file name is ‘book.png’.</blockquote>\n<p><strong>res.download()</strong> is used to download a file on the user’s computer. It takes 3 parameters.</p>\n<p>In the above usage,</p>\n<ol>\n<li>filepath-&gt; Path to the file.</li>\n<li>“downloaded-book.png” -&gt; Alternate name for the file when a user downloads it. (optional)</li>\n<li>(err) =&gt; {} -&gt; Error callback. (optional)</li>\n</ol>\n<h4>Run the app</h4>\n<pre>$ node index</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/930/1*kxS8bqIIHA5ZsLM7LHgWZw.png\"></figure><p>Try making a GET request to <a href=\"http://localhost:3000/download/book.png\">http://localhost:3000/download/book.png</a> to download the file(here, book.png) to your system. (Hit the URL in the browser)</p>\n<p>There are several ways to make an API call from the front end. Since we are dealing with the GET request, a simple way is to use an anchor tag.</p>\n<p>The following code creates a button and when a user clicks on the button, the file is downloaded.</p>\n<pre>&lt;a href=\"<a href=\"http://localhost:3000/download/book.png\">http://localhost:3000/download/book.png</a>\"&gt;<br>    &lt;button&gt;Click to Download&lt;/button&gt; <br>&lt;/a&gt;</pre>\n<p>Github Link 👇</p>\n<p><a href=\"https://github.com/SharmilaS22/medium-download-file-nodejs\">GitHub - SharmilaS22/medium-download-file-nodejs: Code for medium article</a></p>\n<p>Thank you! Hope you find this article useful!</p>\n<p>Follow for more!!</p>\n<p>More Node.js articles: 👇</p>\n<a href=\"https://medium.com/media/45d9b75acb575ef3f9ca14a811fea20f/href\">https://medium.com/media/45d9b75acb575ef3f9ca14a811fea20f/href</a><img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=d35c527f5e48\" width=\"1\" height=\"1\" alt=\"\">\n",
            "content": "\n<p>Add a download option for files on your Node.js web application for users to download them to their local filesystem.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*B8LBO7W3usbO0RVbjjc2mg.gif\"></figure><p><strong>System Requirements: </strong>npm, node.js</p>\n<p>Using Express (framework of node.js), it is easier to download files for users. If you are new to <em>express</em>, refer to the link below to get started.</p>\n<p><a href=\"https://medium.com/featurepreneur/develop-a-backend-server-for-your-application-using-express-29deeae40ed1\">Develop a Backend Server for your application using Express</a></p>\n<h4>Set up the project</h4>\n<ul><li>Create a new directory</li></ul>\n<pre>$ mkdir download-test</pre>\n<pre>$ cd download-test</pre>\n<ul><li>Initiate npm and install the express module.</li></ul>\n<pre>$ npm init</pre>\n<pre>$ npm i express</pre>\n<ul>\n<li>Create an index.js file.</li>\n<li>Create a directory ‘public’ with a sub-directory ‘assets’, save the file that you need to download in the assets folder (here, ‘book.png’).</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/237/1*ZlbMLaCA9bwS5C71NXW1og.png\"><figcaption>Folder Structure</figcaption></figure><ul><li>Add the following code in index.js</li></ul>\n<pre>const <strong>express</strong> = require(\"express\")<br>const <strong>app</strong> = express();</pre>\n<pre>const <strong>PORT</strong> = 3000;</pre>\n<pre><em>// <br>// GET </em><a href=\"http://localhost:3000/download/book.png\"><em>http://localhost:3000/download/book.png</em></a><em><br>//<br></em>app.<strong>get</strong>(\"/download/:filename\", (req, res) =&gt; {</pre>\n<pre>    const <strong>filePath</strong> = __dirname + \"/public/assets/\" + req.params.filename;</pre>\n<pre>    res.<strong>download</strong>(<br>        filePath, <br>        \"downloaded-book.png\", <em>// Remember to include file extension</em><br>        (err) =&gt; {</pre>\n<pre>            <strong>if</strong> (err) {<br>                res.<strong>send</strong>({<br>                    error : err,<br>                    msg   : \"Problem downloading the file\"<br>                })<br>            }</pre>\n<pre>    });<br>});</pre>\n<pre>app.<strong>listen</strong>( PORT, () =&gt; console.log(\"Server listening to port \" + PORT))</pre>\n<h4>Code Explanation</h4>\n<p>We define an API with the endpoint “download/:filename” for the GET method. When a request is sent, the file that is mentioned in the URL will be downloaded.</p>\n<p>Let’s look at the API definition.</p>\n<pre>app.<strong>get</strong>(\"/download/:filename\", (req, res) =&gt; { </pre>\n<pre>    const <strong>filePath</strong> = __dirname + \"/public/assets/\" + req.params.filename;</pre>\n<pre>    res.<strong>download</strong>(<br>        filePath, <br>        \"downloaded-book.png\", <em>// Remember to include file extension</em><br>        (err) =&gt; {</pre>\n<pre><strong>            if</strong> (err) {<br>                res.<strong>send</strong>({<br>                    error : err,<br>                    msg   : \"Problem downloading the file\"<br>                })<br>            }</pre>\n<pre>    });<br>});</pre>\n<blockquote>filepath -&gt; variable to hold the full path of the file which will be downloaded.</blockquote>\n<blockquote>req.params.filename -&gt; to obtain the name of the file to be downloaded from URL parameter. Eg. in \"/download/book.png” , the file name is ‘book.png’.</blockquote>\n<p><strong>res.download()</strong> is used to download a file on the user’s computer. It takes 3 parameters.</p>\n<p>In the above usage,</p>\n<ol>\n<li>filepath-&gt; Path to the file.</li>\n<li>“downloaded-book.png” -&gt; Alternate name for the file when a user downloads it. (optional)</li>\n<li>(err) =&gt; {} -&gt; Error callback. (optional)</li>\n</ol>\n<h4>Run the app</h4>\n<pre>$ node index</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/930/1*kxS8bqIIHA5ZsLM7LHgWZw.png\"></figure><p>Try making a GET request to <a href=\"http://localhost:3000/download/book.png\">http://localhost:3000/download/book.png</a> to download the file(here, book.png) to your system. (Hit the URL in the browser)</p>\n<p>There are several ways to make an API call from the front end. Since we are dealing with the GET request, a simple way is to use an anchor tag.</p>\n<p>The following code creates a button and when a user clicks on the button, the file is downloaded.</p>\n<pre>&lt;a href=\"<a href=\"http://localhost:3000/download/book.png\">http://localhost:3000/download/book.png</a>\"&gt;<br>    &lt;button&gt;Click to Download&lt;/button&gt; <br>&lt;/a&gt;</pre>\n<p>Github Link 👇</p>\n<p><a href=\"https://github.com/SharmilaS22/medium-download-file-nodejs\">GitHub - SharmilaS22/medium-download-file-nodejs: Code for medium article</a></p>\n<p>Thank you! Hope you find this article useful!</p>\n<p>Follow for more!!</p>\n<p>More Node.js articles: 👇</p>\n<a href=\"https://medium.com/media/45d9b75acb575ef3f9ca14a811fea20f/href\">https://medium.com/media/45d9b75acb575ef3f9ca14a811fea20f/href</a><img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=d35c527f5e48\" width=\"1\" height=\"1\" alt=\"\">\n",
            "enclosure": {},
            "categories": [
                "download",
                "javascript",
                "nodejs",
                "web-development",
                "express"
            ]
        },
        {
            "title": "4 Useful tips for Consistent Progress",
            "pubDate": "2021-11-23 15:12:04",
            "link": "https://sharmilas.medium.com/4-useful-tips-for-consistent-progress-2cc228bac139?source=rss-5da727287624------2",
            "guid": "https://medium.com/p/2cc228bac139",
            "author": "Sharmila S",
            "thumbnail": "https://cdn-images-1.medium.com/max/512/0*FPAOeRpXdDRb1RTu.jpg",
            "description": "\n<p>In this article, I will be sharing a few tips that can help you make regular progress on achieving your desired goal.</p>\n<blockquote>\n<strong><em>Small progr</em></strong><em>ess Each day adds up to Big results</em>\n</blockquote>\n<figure><img alt=\"Steps\" src=\"https://cdn-images-1.medium.com/max/512/0*FPAOeRpXdDRb1RTu.jpg\"><figcaption>Photo by <a href=\"https://unsplash.com/@lindsayhenwood?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Lindsay Henwood</a> on <a href=\"https://unsplash.com/@lindsayhenwood?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></figcaption></figure><p>Yes! We always wanted to learn and master new skills. When you start, you are full of motivation and confidence. Wow! you made a lot of progress on the first day! 🙌</p>\n<p>But.. What happens the next day? Your confidence tends to drop down a bit which affects your progress. And this continues…</p>\n<p>Don’t worry! It can happen to anyone. However, there are approaches to handling it. And I’m here to encourage you with that.</p>\n<h3>1. Uneven schedule or timings ⌚</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/512/0*FW17R5MiSd8JYUEO.jpg\"><figcaption>Photo by <a href=\"https://www.blogger.com/blog/post/edit/4990881458401044323/418927786457817896#\">Lukas Blazek</a> on <a href=\"https://www.blogger.com/blog/post/edit/4990881458401044323/418927786457817896#\">Unsplash</a></figcaption></figure><p>Having a fixed timing is significant when you are determined to achieve your goal.</p>\n<p>If you don’t have a fixed timing at all, you might procrastinate and push the work until midnight or might not find time at all in the end.</p>\n<p>Furthermore, For the task, you choose a particular time in a day. If it does not fit in your schedule, it may be hard to find time in your schedule on some days. So, there will not be any regular progress.</p>\n<h3>2. Expecting to see the result too soon 🎯</h3>\n<blockquote><em>Trust your hard work, it’s unlocking doors you can’t see yet.</em></blockquote>\n<p>You may not notice your improvement if you are looking for it every day.</p>\n<p>Try to focus on your daily tasks and also ensure that you are moving on the right track. Eventually, You will realise your improvement one day. And trust me! It is one of the most satisfying feelings ever, thanks to your consistent effort. It can also be a good booster in the process.</p>\n<h3>3. Don’t be desultory</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*d9o68lbtgwztDQ-w519nSg.jpeg\"><figcaption>Photo by <a href=\"https://unsplash.com/@bdchu614?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Brendan Church</a> on <a href=\"https://unsplash.com/s/photos/choose?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></figcaption></figure><p>Don’t let your mind wander around for better options after deciding on a task. Before committing yourself to a new goal, do enough research to be confident in spending time on it.</p>\n<p>If you are constantly thinking of starting something better, you are likely to shift from one task to another. In the end, you might not have applied serious effort to any of the tasks.</p>\n<h3>4. Don’t commit yourself to too many tasks</h3>\n<p>Though you are working consistently, if you focus on too many things at a time, it is possible that you get tired of doing so many things and decide to quit some of them.</p>\n<p>Consider that your goal currently is to learn a new language. If you spend a fixed time learning the language every day, there are fewer distractions.</p>\n<p>All the best! Hope this article is helpful!</p>\n<p>What’s your current goal? Feel free to share it in the comments!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=2cc228bac139\" width=\"1\" height=\"1\" alt=\"\">\n",
            "content": "\n<p>In this article, I will be sharing a few tips that can help you make regular progress on achieving your desired goal.</p>\n<blockquote>\n<strong><em>Small progr</em></strong><em>ess Each day adds up to Big results</em>\n</blockquote>\n<figure><img alt=\"Steps\" src=\"https://cdn-images-1.medium.com/max/512/0*FPAOeRpXdDRb1RTu.jpg\"><figcaption>Photo by <a href=\"https://unsplash.com/@lindsayhenwood?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Lindsay Henwood</a> on <a href=\"https://unsplash.com/@lindsayhenwood?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></figcaption></figure><p>Yes! We always wanted to learn and master new skills. When you start, you are full of motivation and confidence. Wow! you made a lot of progress on the first day! 🙌</p>\n<p>But.. What happens the next day? Your confidence tends to drop down a bit which affects your progress. And this continues…</p>\n<p>Don’t worry! It can happen to anyone. However, there are approaches to handling it. And I’m here to encourage you with that.</p>\n<h3>1. Uneven schedule or timings ⌚</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/512/0*FW17R5MiSd8JYUEO.jpg\"><figcaption>Photo by <a href=\"https://www.blogger.com/blog/post/edit/4990881458401044323/418927786457817896#\">Lukas Blazek</a> on <a href=\"https://www.blogger.com/blog/post/edit/4990881458401044323/418927786457817896#\">Unsplash</a></figcaption></figure><p>Having a fixed timing is significant when you are determined to achieve your goal.</p>\n<p>If you don’t have a fixed timing at all, you might procrastinate and push the work until midnight or might not find time at all in the end.</p>\n<p>Furthermore, For the task, you choose a particular time in a day. If it does not fit in your schedule, it may be hard to find time in your schedule on some days. So, there will not be any regular progress.</p>\n<h3>2. Expecting to see the result too soon 🎯</h3>\n<blockquote><em>Trust your hard work, it’s unlocking doors you can’t see yet.</em></blockquote>\n<p>You may not notice your improvement if you are looking for it every day.</p>\n<p>Try to focus on your daily tasks and also ensure that you are moving on the right track. Eventually, You will realise your improvement one day. And trust me! It is one of the most satisfying feelings ever, thanks to your consistent effort. It can also be a good booster in the process.</p>\n<h3>3. Don’t be desultory</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*d9o68lbtgwztDQ-w519nSg.jpeg\"><figcaption>Photo by <a href=\"https://unsplash.com/@bdchu614?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Brendan Church</a> on <a href=\"https://unsplash.com/s/photos/choose?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></figcaption></figure><p>Don’t let your mind wander around for better options after deciding on a task. Before committing yourself to a new goal, do enough research to be confident in spending time on it.</p>\n<p>If you are constantly thinking of starting something better, you are likely to shift from one task to another. In the end, you might not have applied serious effort to any of the tasks.</p>\n<h3>4. Don’t commit yourself to too many tasks</h3>\n<p>Though you are working consistently, if you focus on too many things at a time, it is possible that you get tired of doing so many things and decide to quit some of them.</p>\n<p>Consider that your goal currently is to learn a new language. If you spend a fixed time learning the language every day, there are fewer distractions.</p>\n<p>All the best! Hope this article is helpful!</p>\n<p>What’s your current goal? Feel free to share it in the comments!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=2cc228bac139\" width=\"1\" height=\"1\" alt=\"\">\n",
            "enclosure": {},
            "categories": [
                "productivity-tips",
                "tips",
                "progress",
                "consistency",
                "productivity"
            ]
        },
        {
            "title": "Set Aesthetic clock screen saver in your laptop (Windows OS)",
            "pubDate": "2021-11-17 07:30:55",
            "link": "https://sharmilas.medium.com/set-aesthetic-clock-screen-saver-in-your-laptop-windows-os-122db5e871a4?source=rss-5da727287624------2",
            "guid": "https://medium.com/p/122db5e871a4",
            "author": "Sharmila S",
            "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*wU0zSlSibCrwthTRPXIt1g.png",
            "description": "\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*wU0zSlSibCrwthTRPXIt1g.png\"></figure><p>Make your laptop screen look elegant when it's idle by installing this clock screen saver. This article guides you to set it up on your laptop.</p>\n<h4>System requirement:</h4>\n<ul><li>Windows 8 or higher (also available for macOS)</li></ul>\n<h3>Steps</h3>\n<p>Firstly, head to <a href=\"https://fliqlo.com/\">https://fliqlo.com/</a> website. Once the page loads, click on the desktop screen shown in the centre or select the menu at the top-right corner.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*1sxsWlfSXKTBoOS6ipp78w.png\"><figcaption><a href=\"https://fliqlo.com/\">https://fliqlo.com/</a></figcaption></figure><p>When the menu opens, select the Screensaver tab.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*lGXZr4zheJlx7YBD6Y83wQ.png\"></figure><p>Scroll down to the download options.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*tGKaQ_nX3NhYASVd14OKeg.png\"></figure><p>Click download under Windows. A zip folder is downloaded.</p>\n<p>Extract the downloaded zip folder.</p>\n<p>Within the extracted folder, right-click on the <strong><em>Fliqlo.scr</em></strong><em> </em>file, select <strong>Install </strong>from the menu.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*85TMMDlBPpQTpQvnpyr35Q.png\"></figure><blockquote>For windows 11 version, right-click on the file and select the ‘Show more options’.</blockquote>\n<blockquote>And then select Install from the sub menu that appears.</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*mVAhvM00HCAzTNALCHSDdA.gif\"></figure><p>When you click install, the ‘Screen Saver Settings’ window appears.</p>\n<p>To set our clock screensaver, select the option ‘Fliqlo’ from the list of options under screen saver.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/662/1*To8lKOCYAG99GP-EHNppIw.png\"></figure><p>You can also modify the waiting time for your screen saver. (Here, I set 3 mins waiting time, which means if the screen is idle for 3 mins, the screen saver fills the screen).</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/655/1*rSSVpPP9p7lRX7wO6YXl4Q.png\"></figure><p>Click Ok.</p>\n<p>Your Screen saver is ready!!</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*wU0zSlSibCrwthTRPXIt1g.png\"></figure><p>If you liked this article, you can support me by <a href=\"https://www.buymeacoffee.com/sharmilas\">buying me a coffee</a>. I’d love support in any way!</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*VqLYs481X9kw_CTosgqlcg.png\"><figcaption><a href=\"https://www.buymeacoffee.com/sharmilas\">https://www.buymeacoffee.com/sharmilas</a></figcaption></figure><img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=122db5e871a4\" width=\"1\" height=\"1\" alt=\"\">\n",
            "content": "\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*wU0zSlSibCrwthTRPXIt1g.png\"></figure><p>Make your laptop screen look elegant when it's idle by installing this clock screen saver. This article guides you to set it up on your laptop.</p>\n<h4>System requirement:</h4>\n<ul><li>Windows 8 or higher (also available for macOS)</li></ul>\n<h3>Steps</h3>\n<p>Firstly, head to <a href=\"https://fliqlo.com/\">https://fliqlo.com/</a> website. Once the page loads, click on the desktop screen shown in the centre or select the menu at the top-right corner.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*1sxsWlfSXKTBoOS6ipp78w.png\"><figcaption><a href=\"https://fliqlo.com/\">https://fliqlo.com/</a></figcaption></figure><p>When the menu opens, select the Screensaver tab.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*lGXZr4zheJlx7YBD6Y83wQ.png\"></figure><p>Scroll down to the download options.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*tGKaQ_nX3NhYASVd14OKeg.png\"></figure><p>Click download under Windows. A zip folder is downloaded.</p>\n<p>Extract the downloaded zip folder.</p>\n<p>Within the extracted folder, right-click on the <strong><em>Fliqlo.scr</em></strong><em> </em>file, select <strong>Install </strong>from the menu.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*85TMMDlBPpQTpQvnpyr35Q.png\"></figure><blockquote>For windows 11 version, right-click on the file and select the ‘Show more options’.</blockquote>\n<blockquote>And then select Install from the sub menu that appears.</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*mVAhvM00HCAzTNALCHSDdA.gif\"></figure><p>When you click install, the ‘Screen Saver Settings’ window appears.</p>\n<p>To set our clock screensaver, select the option ‘Fliqlo’ from the list of options under screen saver.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/662/1*To8lKOCYAG99GP-EHNppIw.png\"></figure><p>You can also modify the waiting time for your screen saver. (Here, I set 3 mins waiting time, which means if the screen is idle for 3 mins, the screen saver fills the screen).</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/655/1*rSSVpPP9p7lRX7wO6YXl4Q.png\"></figure><p>Click Ok.</p>\n<p>Your Screen saver is ready!!</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*wU0zSlSibCrwthTRPXIt1g.png\"></figure><p>If you liked this article, you can support me by <a href=\"https://www.buymeacoffee.com/sharmilas\">buying me a coffee</a>. I’d love support in any way!</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*VqLYs481X9kw_CTosgqlcg.png\"><figcaption><a href=\"https://www.buymeacoffee.com/sharmilas\">https://www.buymeacoffee.com/sharmilas</a></figcaption></figure><img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=122db5e871a4\" width=\"1\" height=\"1\" alt=\"\">\n",
            "enclosure": {},
            "categories": [
                "windows",
                "aesthetics",
                "productivity",
                "clock"
            ]
        },
        {
            "title": "Lambda — API Gateway —  DynamoDB",
            "pubDate": "2021-08-19 17:39:42",
            "link": "https://medium.com/featurepreneur/lambda-api-gateway-dynamodb-d8a35c379810?source=rss-5da727287624------2",
            "guid": "https://medium.com/p/d8a35c379810",
            "author": "Sharmila S",
            "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*7XDPWMhQaoLfDe3LMC80jw.gif",
            "description": "\n<h3>Lambda — API Gateway — DynamoDB</h3>\n<p>Let’s learn to use these services with a use case — create an API to add a new entry to the database using AWS Services — Lambda, API Gateway and DynamoDB.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*7XDPWMhQaoLfDe3LMC80jw.gif\"></figure><h4>What we are going to create?</h4>\n<ul>\n<li>An Amazon DynamoDB table called Book to store book details.</li>\n<li>An API using API Gateway to add a new book record to the table created.</li>\n<li>A Lambda function that handles the request from API and adds the details to the DynamoDB Table.</li>\n</ul>\n<h4>Resources Used:</h4>\n<ul>\n<li>Amazon API Gateway —a fully managed service that makes it easy for developers to create, publish, maintain, monitor, and secure APIs at any scale.</li>\n<li>AWS Lambda — a serverless compute service by AWS.</li>\n<li>AWS IAM — enables you to manage access to AWS services and resources securely.</li>\n<li>Amazon DynamoDB — NoSQL Database service by AWS.</li>\n<li>Postman (to test our API)</li>\n</ul>\n<h4>Let’s have a look at the steps:</h4>\n<ol>\n<li>\n<strong>DynamoDB</strong>: Create a table in DynamoDB.</li>\n<li>\n<strong>Lambda</strong>: Create a Lambda function with necessary permissions.</li>\n<li>\n<strong>Lambda</strong>: Write the code to add data to the Table (in python) and Test it.</li>\n<li>\n<strong>API Gateway</strong>: Create an API with a POST method.</li>\n<li>\n<strong>API Gateway</strong>: Integrate the API with the Lambda function created and configure query parameters (for passing the data to function).</li>\n<li>\n<strong>API Gateway</strong>: Deploy the API to a new Stage.</li>\n<li>\n<strong>Lambda</strong>: Modify the lambda function to accept the data sent through the API request from API Gateway.</li>\n<li>\n<strong>Postman</strong>: Test the API.</li>\n</ol>\n<h3>Step 1: Create a new table in DynamoDB</h3>\n<ul><li>Go to DynamoDB service from AWS Console, then click ‘Create Table’.</li></ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*SnMgm2ybUwPg8IIoTwGi3A.png\"></figure><ul><li>Provide a <em>name</em> for the table, along with the partition key attribute (in our example, we use the ‘<em>id</em>’ attribute of <em>Number</em> type, to identify our records). Click Create.</li></ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*TmmNA32cCygW2M-AXBrhxA.png\"></figure><blockquote>\n<strong>Partition key</strong> — A simple primary key, composed of one attribute known as the <em>partition key</em>. Attributes in DynamoDB are similar in many ways to fields or columns in other database systems.</blockquote>\n<blockquote>\n<strong>Partition key and Sort key</strong> — Referred to as a <em>composite primary key</em>, this type of key is composed of two attributes. The first attribute is the <em>partition key</em>, and the second attribute is the<em> sort key</em>.</blockquote>\n<blockquote>Learn more about keys - <a href=\"https://aws.amazon.com/blogs/database/choosing-the-right-dynamodb-partition-key/\">link1</a>, <a href=\"https://aws.amazon.com/blogs/database/using-sort-keys-to-organize-data-in-amazon-dynamodb/\">link2</a>.</blockquote>\n<ul><li>After the table is created, you can select the table and view its properties. To view the entries in the table, click on the <em>Items</em> tab.</li></ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*x2gb34zGtCvEKSRrg9H9Og.png\"></figure><ul><li>You could see the partition key attribute appearing as a column name already. Currently, our table is empty. We will leave it to the Lambda function to handle the insertion process for us.</li></ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*sfHned20DQfcoT7fBnumFQ.png\"></figure><h3>Step 2: Create a Lambda function with necessary permissions.</h3>\n<ul><li>Before creating the function, we are going to create a role to allow our lambda function to access DynamoDB.</li></ul>\n<blockquote>IAM Role: an IAM identity that you can create in your account that has specific permissions. An IAM role is similar to an IAM user, in that it is an AWS identity with permission policies that determine what the identity can and cannot do in AWS.</blockquote>\n<ul><li>To create a new role, go to the IAM console. Then, select <strong>Roles</strong> from the menu.</li></ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/338/1*sJX6iEdqfajqVDsoBBuNFw.png\"></figure><ul><li>In the dashboard, select ‘Create Role’.</li></ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*RDz_cW8clb7f6QEcuKm07A.png\"></figure><p>Under<strong> AWS service</strong>, select <strong>Lambda</strong> (since we are creating role<strong> for Lambda</strong>)</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*YPtlMAIxgXv39rXeo7Hjog.png\"></figure><p>Select the policies required for our Lambda function, then click Next.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*cjPfWquAkeJOrqcr6ToSVg.png\"></figure><p>Provide a name for the role and click Create.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*j_gqEn2FZXsp6dYoXHx6MQ.png\"></figure><p>Once the policy is created, it can be assigned to any lambda function.</p>\n<p>Now, let’s create our lambda function and assign this role to it.</p>\n<p>Go to Lambda service from the AWS console and create a new function. Provide a name and choose the language in which the function will be written.</p>\n<p>We are gonna use python language in this article. But, few other languages are supported as well. To know about the languages supported and how to use them, visit <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GettingStarted.html\">here</a>.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*08bzPSQL43cNaU5Whu38rg.png\"></figure><p>For Permissions, select the role we created, which gives permission for this function to access and work with DynamoDB. Then, click <em>Create Function</em>.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*NrAKDWXvpFY8GYXG_qp__w.png\"></figure><p>Our Lambda function is now created.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*TRoBcs5nzg3jsLBXL-dXJw.png\"></figure><p>Now, let’s edit our function.</p>\n<h3>\n<strong>Step 3</strong>: Write the code to add data to the Table (in python) and Test it.</h3>\n<p>Scroll down to the editor, and open <em>lambda_handler.py </em>( the main file ) where we are going to add the code for handling the data and adding it to the table.</p>\n<p>In python, we can use the <strong>boto3</strong> module to work with AWS resources. Learn more on using boto3 <a href=\"https://boto3.amazonaws.com/v1/documentation/api/latest/index.html#\">here</a>.</p>\n<p>Add the following code to ‘lambda_handler.py’.</p>\n<pre>import json<br>import boto3                          <em># import the boto3 module</em></pre>\n<pre>dynamodb = boto3.resource('dynamodb') <em># get the DynamoDB resource</em><br>bookTable = dynamodb.Table('book')    <em># access the table 'Book'</em></pre>\n<pre>def lambda_handler(event, content):</pre>\n<pre>    bookTable.put_item(Item=event)    <em># Add item to table</em></pre>\n<pre>    return { <br>        'statusCode': 200,<br>        'body': json.dumps('Added Entry Successfully!')<br>    }</pre>\n<p>The event in bookTable.put_item(Item=event) represents the JSON request that is sent to lambda.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ZfRwgiofIFPqLqsOYlG0GA.png\"></figure><p>Click the ‘Deploy’ button at the top, to deploy the changes.</p>\n<p>Now, we can test our code with test cases by clicking on the 🔻 (inverted triangle) next to ‘Test’ button. And select ‘Configure test event’.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/490/1*EmdrbKwzTDQnumD9iWYZFQ.png\"></figure><p>Provide a name for the test event. Edit the JSON data already present, by giving our book data (in JSON format) which will be passed as the <em>event </em>parameter to<em> lambda_handler(event, content)</em></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*X0nbOLh4mw5ksudqgfnUqA.png\"></figure><p>Now, click ‘Test’ button to test our event. Below, you can see the response that was received back.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*_ZUK6lVReTY87xNXrUHl4w.png\"></figure><p>We got the success message! We can observe that our DynamoDB table is updated with the new record.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*7xyMs5YP7n72Y3iIgZQcUg.png\"></figure><h3>Step 4: Create an API in API Gateway with a POST method.</h3>\n<p>Head to API Gateway service.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*_c6GgkFmvMNFNPBbg-KAtw.png\"></figure><p>Among the categories displayed, select <strong>REST API</strong>, click <strong>Build</strong>.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*zixIOG_mwrZjetgm7iFVhw.png\"></figure><p>Select REST as the protocol. Then select New API and enter a name, and finally click <strong>Create API.</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*aZnBBEbcMoJTsrOVbLxjWA.png\"></figure><p>We created our new API.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*nsWApZ1yYEpHMsEyUyFrjA.png\"></figure><p>Let’s create a new post method, click on Actions -&gt; Create Method</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/545/1*3GPQ7kaW3Ba98x4pT-V_Zg.png\"></figure><p>Select POST from the drop-down list</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/469/1*NPCDhCsXdSAoNDXzFHoNYQ.png\"></figure><h3>\n<strong>Step 5</strong>: Integrate the API with the Lambda function created and configure query parameters (for passing the data to function).</h3>\n<p>After the Post method is created, select the <em>Integration type</em> as <em>Lambda function</em> (Since our method is going to communicate with a lambda function that handles the request).<em><br></em>Enable the ‘Use lambda proxy integration’ check box.<br>Provide the name of the lambda function we created to integrate it.<br>Click Save.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*0dP0vi9pKXn4hcqpsV6xxA.png\"></figure><p>A dialog will pop up asking about giving permissions to API gateway to access lambda, click OK to update the permissions (You can also do this manually, as we did previously for providing DynamoDB access for our lambda).</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*tP8fRvdIQuj6pnWs2re3_g.png\"></figure><p>Now, select <strong>Method Request</strong> to edit the query parameters using which we are going to send the data.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*DEhxqAO1saXT9zIDsp2Y8w.png\"></figure><p>Edit <em>URL Query String Parameters</em>, mention the parameters that are to be sent along with the request.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*UilI_KGLa-LvNwPq1Bt8qA.png\"></figure><p>We add the parameters, ‘id’, ‘title’ and ‘author’. In our case, all three are required.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*MT04A5o-HiKBflsrJh5QlQ.png\"></figure><h3>Step 6: Deploy the API to a new Stage</h3>\n<p>Our API is ready to be deployed. But before that, we have to make enable CORS for the domain that will be using this API.</p>\n<p>In this example, we will be trying to call this API from <a href=\"https://www.postman.com/\">Postman</a>. So, I will be allowing all origins and domains here.</p>\n<p>Select ‘Enable CORS’ from Actions.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/380/1*4nm24kSWXuSxQ6iDcBieSw.png\"></figure><p>Enable <em>Default 4XX</em> and <em>Default</em> 5XX for gateway responses. <br>Enable the method (here the method is POST).</p>\n<p>You can modify the ‘Access-Control-Allow-Methods’ and ‘Access-Control-Allow-Headers’ based on your application requirements. (Here, I’m not adding any restrictions in order to keep it easier for testing.)</p>\n<p>Then click <em>Enable CORS and replace existing CORS headers</em></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*8r0EQUIZShRorsJq0baSDg.png\"></figure><p>A confirm box pops up. Select ‘Yes, replace existing values’ button.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*zIlBQvzU1nJOjBkxuoPtpA.png\"></figure><p>Wait for all the processes to complete. Once you can see a tick mark ✔ for all of those, our API is ready to be deployed.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*5K-mmYh2gKpxWT3EoCVTgQ.png\"></figure><p>To deploy our API, Select <em>Deploy API</em> from Actions menu.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/605/1*smQ1heXAVlyBi0rYsh8_ew.png\"></figure><p>Select <strong>New Stage</strong> for the deployment stage.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/941/1*yam3r0W_m2o-GF7xES19og.png\"></figure><p>Provide a name for our new stage. Description for both stage and deployment is optional. Then click <em>Deploy</em>.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/949/1*p7syCThRReflPGgndOYafw.png\"></figure><p>Our API is deployed and ready to use now. The invoke URL for our new stage is generated and we can use this URL to make a call to our API.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*oc54kTh8Rymki0m8IPXQhA.png\"></figure><p>Now that API is ready, we have to modify our lambda function so that it can take the data from query parameters that are sent along with the API request and then add it to the DynamoDB table.</p>\n<h3>Step 7: Modify the lambda function to accept the data sent through the API request from API Gateway.</h3>\n<p>The JSON request from the API Gateway will be in a specific format.</p>\n<p>So, let’s create a new test event. Click on the inverted triangle button next to Test and select ‘Click new test event’ to create a new event.</p>\n<p>In the Event Template, start typing apigateway and select ‘Amazon API Gateway AWS Proxy’ from the list which updates the JSON event below that.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*KLHsB4Qp2ahTxiPnPsUI_Q.png\"></figure><p>Provide a name for our new test case.</p>\n<p>The JSON event represents a sample request from API Gateway. The data sent through the URL can be accessed from the \"queryStringParameters\" property. There we have to specify our book details to mimic the functionality for testing our function to take data from query parameters.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*fIPuPHCwGPob5a9Ux7ehmg.png\"></figure><p>Edit the query string parameters with our data as shown below.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*vgKYB7bKSQRccS3PuYiMhw.png\"></figure><p>While creating the table, we mentioned the type of ‘id’ (partition key) as a <em>Number. </em>But the data received from a URL will be a <em>string</em>. So, we have to change the id attribute to Number(int) type before adding it to the table.</p>\n<p>Let’s modify the code to convert the ‘id’ attribute to a Number and send only the queryStringParameters to the table.</p>\n<pre>event['queryStringParameters']['id'] = int(event['queryStringParameters']['id'])</pre>\n<pre>bookTable.put_item(Item=event['queryStringParameters'])</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/852/1*-UV0bZvzse7vclOqxNaS7A.png\"></figure><p>Click on the Test button to test our modified code.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*7I8DNwACxNGvYJqN9EXh2g.png\"></figure><p>We get success response! Now let us try making a request from the API gateway.</p>\n<p>Go to our API in the API Gateway service. Select the POST method and Click ‘Test’.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Qc9csGzQmYgetm35iZo7PQ.png\"></figure><p>Enter the query strings with new data. And Click Test. Query Strings should be given in the following format.</p>\n<pre>key1=value1<strong>&amp;</strong>key2=value2<strong>&amp;</strong>key3=value3</pre>\n<pre>eg, <br>id=4<strong>&amp;</strong>title=Becoming<strong>&amp;</strong>author=MichelleObama</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*zam0vZbXdD3QsB4nFnT7FA.png\"></figure><p>We get success response! Our API is working perfectly.</p>\n<p>In this way, we can create a REST API using Amazon API Gateway with different methods and can also customise the properties based on our needs.</p>\n<p>Now I can now try giving a POST request to the API from Postman software. (Note: I have allowed ‘all access’ to my API for testing only)</p>\n<h3>Test the API</h3>\n<p>Send a POST request to the invoke URL with the query parameters.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*e-o7SXrjGj9owBoTTCAYrA.png\"></figure><p>We received success response.</p>\n<p>Follow for more! Happy Learning!</p>\n<p>If you liked this article, you can support me by <a href=\"https://www.buymeacoffee.com/sharmilas\">buying me a coffee</a>. I’d appreciate support in any way!</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Nh1owl6a3HdaRB_Y0y04pw.png\"></figure><img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=d8a35c379810\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://medium.com/featurepreneur/lambda-api-gateway-dynamodb-d8a35c379810\">Lambda — API Gateway —  DynamoDB</a> was originally published in <a href=\"https://medium.com/featurepreneur\">featurepreneur</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "content": "\n<h3>Lambda — API Gateway — DynamoDB</h3>\n<p>Let’s learn to use these services with a use case — create an API to add a new entry to the database using AWS Services — Lambda, API Gateway and DynamoDB.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*7XDPWMhQaoLfDe3LMC80jw.gif\"></figure><h4>What we are going to create?</h4>\n<ul>\n<li>An Amazon DynamoDB table called Book to store book details.</li>\n<li>An API using API Gateway to add a new book record to the table created.</li>\n<li>A Lambda function that handles the request from API and adds the details to the DynamoDB Table.</li>\n</ul>\n<h4>Resources Used:</h4>\n<ul>\n<li>Amazon API Gateway —a fully managed service that makes it easy for developers to create, publish, maintain, monitor, and secure APIs at any scale.</li>\n<li>AWS Lambda — a serverless compute service by AWS.</li>\n<li>AWS IAM — enables you to manage access to AWS services and resources securely.</li>\n<li>Amazon DynamoDB — NoSQL Database service by AWS.</li>\n<li>Postman (to test our API)</li>\n</ul>\n<h4>Let’s have a look at the steps:</h4>\n<ol>\n<li>\n<strong>DynamoDB</strong>: Create a table in DynamoDB.</li>\n<li>\n<strong>Lambda</strong>: Create a Lambda function with necessary permissions.</li>\n<li>\n<strong>Lambda</strong>: Write the code to add data to the Table (in python) and Test it.</li>\n<li>\n<strong>API Gateway</strong>: Create an API with a POST method.</li>\n<li>\n<strong>API Gateway</strong>: Integrate the API with the Lambda function created and configure query parameters (for passing the data to function).</li>\n<li>\n<strong>API Gateway</strong>: Deploy the API to a new Stage.</li>\n<li>\n<strong>Lambda</strong>: Modify the lambda function to accept the data sent through the API request from API Gateway.</li>\n<li>\n<strong>Postman</strong>: Test the API.</li>\n</ol>\n<h3>Step 1: Create a new table in DynamoDB</h3>\n<ul><li>Go to DynamoDB service from AWS Console, then click ‘Create Table’.</li></ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*SnMgm2ybUwPg8IIoTwGi3A.png\"></figure><ul><li>Provide a <em>name</em> for the table, along with the partition key attribute (in our example, we use the ‘<em>id</em>’ attribute of <em>Number</em> type, to identify our records). Click Create.</li></ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*TmmNA32cCygW2M-AXBrhxA.png\"></figure><blockquote>\n<strong>Partition key</strong> — A simple primary key, composed of one attribute known as the <em>partition key</em>. Attributes in DynamoDB are similar in many ways to fields or columns in other database systems.</blockquote>\n<blockquote>\n<strong>Partition key and Sort key</strong> — Referred to as a <em>composite primary key</em>, this type of key is composed of two attributes. The first attribute is the <em>partition key</em>, and the second attribute is the<em> sort key</em>.</blockquote>\n<blockquote>Learn more about keys - <a href=\"https://aws.amazon.com/blogs/database/choosing-the-right-dynamodb-partition-key/\">link1</a>, <a href=\"https://aws.amazon.com/blogs/database/using-sort-keys-to-organize-data-in-amazon-dynamodb/\">link2</a>.</blockquote>\n<ul><li>After the table is created, you can select the table and view its properties. To view the entries in the table, click on the <em>Items</em> tab.</li></ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*x2gb34zGtCvEKSRrg9H9Og.png\"></figure><ul><li>You could see the partition key attribute appearing as a column name already. Currently, our table is empty. We will leave it to the Lambda function to handle the insertion process for us.</li></ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*sfHned20DQfcoT7fBnumFQ.png\"></figure><h3>Step 2: Create a Lambda function with necessary permissions.</h3>\n<ul><li>Before creating the function, we are going to create a role to allow our lambda function to access DynamoDB.</li></ul>\n<blockquote>IAM Role: an IAM identity that you can create in your account that has specific permissions. An IAM role is similar to an IAM user, in that it is an AWS identity with permission policies that determine what the identity can and cannot do in AWS.</blockquote>\n<ul><li>To create a new role, go to the IAM console. Then, select <strong>Roles</strong> from the menu.</li></ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/338/1*sJX6iEdqfajqVDsoBBuNFw.png\"></figure><ul><li>In the dashboard, select ‘Create Role’.</li></ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*RDz_cW8clb7f6QEcuKm07A.png\"></figure><p>Under<strong> AWS service</strong>, select <strong>Lambda</strong> (since we are creating role<strong> for Lambda</strong>)</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*YPtlMAIxgXv39rXeo7Hjog.png\"></figure><p>Select the policies required for our Lambda function, then click Next.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*cjPfWquAkeJOrqcr6ToSVg.png\"></figure><p>Provide a name for the role and click Create.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*j_gqEn2FZXsp6dYoXHx6MQ.png\"></figure><p>Once the policy is created, it can be assigned to any lambda function.</p>\n<p>Now, let’s create our lambda function and assign this role to it.</p>\n<p>Go to Lambda service from the AWS console and create a new function. Provide a name and choose the language in which the function will be written.</p>\n<p>We are gonna use python language in this article. But, few other languages are supported as well. To know about the languages supported and how to use them, visit <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GettingStarted.html\">here</a>.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*08bzPSQL43cNaU5Whu38rg.png\"></figure><p>For Permissions, select the role we created, which gives permission for this function to access and work with DynamoDB. Then, click <em>Create Function</em>.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*NrAKDWXvpFY8GYXG_qp__w.png\"></figure><p>Our Lambda function is now created.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*TRoBcs5nzg3jsLBXL-dXJw.png\"></figure><p>Now, let’s edit our function.</p>\n<h3>\n<strong>Step 3</strong>: Write the code to add data to the Table (in python) and Test it.</h3>\n<p>Scroll down to the editor, and open <em>lambda_handler.py </em>( the main file ) where we are going to add the code for handling the data and adding it to the table.</p>\n<p>In python, we can use the <strong>boto3</strong> module to work with AWS resources. Learn more on using boto3 <a href=\"https://boto3.amazonaws.com/v1/documentation/api/latest/index.html#\">here</a>.</p>\n<p>Add the following code to ‘lambda_handler.py’.</p>\n<pre>import json<br>import boto3                          <em># import the boto3 module</em></pre>\n<pre>dynamodb = boto3.resource('dynamodb') <em># get the DynamoDB resource</em><br>bookTable = dynamodb.Table('book')    <em># access the table 'Book'</em></pre>\n<pre>def lambda_handler(event, content):</pre>\n<pre>    bookTable.put_item(Item=event)    <em># Add item to table</em></pre>\n<pre>    return { <br>        'statusCode': 200,<br>        'body': json.dumps('Added Entry Successfully!')<br>    }</pre>\n<p>The event in bookTable.put_item(Item=event) represents the JSON request that is sent to lambda.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ZfRwgiofIFPqLqsOYlG0GA.png\"></figure><p>Click the ‘Deploy’ button at the top, to deploy the changes.</p>\n<p>Now, we can test our code with test cases by clicking on the 🔻 (inverted triangle) next to ‘Test’ button. And select ‘Configure test event’.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/490/1*EmdrbKwzTDQnumD9iWYZFQ.png\"></figure><p>Provide a name for the test event. Edit the JSON data already present, by giving our book data (in JSON format) which will be passed as the <em>event </em>parameter to<em> lambda_handler(event, content)</em></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*X0nbOLh4mw5ksudqgfnUqA.png\"></figure><p>Now, click ‘Test’ button to test our event. Below, you can see the response that was received back.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*_ZUK6lVReTY87xNXrUHl4w.png\"></figure><p>We got the success message! We can observe that our DynamoDB table is updated with the new record.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*7xyMs5YP7n72Y3iIgZQcUg.png\"></figure><h3>Step 4: Create an API in API Gateway with a POST method.</h3>\n<p>Head to API Gateway service.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*_c6GgkFmvMNFNPBbg-KAtw.png\"></figure><p>Among the categories displayed, select <strong>REST API</strong>, click <strong>Build</strong>.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*zixIOG_mwrZjetgm7iFVhw.png\"></figure><p>Select REST as the protocol. Then select New API and enter a name, and finally click <strong>Create API.</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*aZnBBEbcMoJTsrOVbLxjWA.png\"></figure><p>We created our new API.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*nsWApZ1yYEpHMsEyUyFrjA.png\"></figure><p>Let’s create a new post method, click on Actions -&gt; Create Method</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/545/1*3GPQ7kaW3Ba98x4pT-V_Zg.png\"></figure><p>Select POST from the drop-down list</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/469/1*NPCDhCsXdSAoNDXzFHoNYQ.png\"></figure><h3>\n<strong>Step 5</strong>: Integrate the API with the Lambda function created and configure query parameters (for passing the data to function).</h3>\n<p>After the Post method is created, select the <em>Integration type</em> as <em>Lambda function</em> (Since our method is going to communicate with a lambda function that handles the request).<em><br></em>Enable the ‘Use lambda proxy integration’ check box.<br>Provide the name of the lambda function we created to integrate it.<br>Click Save.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*0dP0vi9pKXn4hcqpsV6xxA.png\"></figure><p>A dialog will pop up asking about giving permissions to API gateway to access lambda, click OK to update the permissions (You can also do this manually, as we did previously for providing DynamoDB access for our lambda).</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*tP8fRvdIQuj6pnWs2re3_g.png\"></figure><p>Now, select <strong>Method Request</strong> to edit the query parameters using which we are going to send the data.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*DEhxqAO1saXT9zIDsp2Y8w.png\"></figure><p>Edit <em>URL Query String Parameters</em>, mention the parameters that are to be sent along with the request.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*UilI_KGLa-LvNwPq1Bt8qA.png\"></figure><p>We add the parameters, ‘id’, ‘title’ and ‘author’. In our case, all three are required.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*MT04A5o-HiKBflsrJh5QlQ.png\"></figure><h3>Step 6: Deploy the API to a new Stage</h3>\n<p>Our API is ready to be deployed. But before that, we have to make enable CORS for the domain that will be using this API.</p>\n<p>In this example, we will be trying to call this API from <a href=\"https://www.postman.com/\">Postman</a>. So, I will be allowing all origins and domains here.</p>\n<p>Select ‘Enable CORS’ from Actions.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/380/1*4nm24kSWXuSxQ6iDcBieSw.png\"></figure><p>Enable <em>Default 4XX</em> and <em>Default</em> 5XX for gateway responses. <br>Enable the method (here the method is POST).</p>\n<p>You can modify the ‘Access-Control-Allow-Methods’ and ‘Access-Control-Allow-Headers’ based on your application requirements. (Here, I’m not adding any restrictions in order to keep it easier for testing.)</p>\n<p>Then click <em>Enable CORS and replace existing CORS headers</em></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*8r0EQUIZShRorsJq0baSDg.png\"></figure><p>A confirm box pops up. Select ‘Yes, replace existing values’ button.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*zIlBQvzU1nJOjBkxuoPtpA.png\"></figure><p>Wait for all the processes to complete. Once you can see a tick mark ✔ for all of those, our API is ready to be deployed.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*5K-mmYh2gKpxWT3EoCVTgQ.png\"></figure><p>To deploy our API, Select <em>Deploy API</em> from Actions menu.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/605/1*smQ1heXAVlyBi0rYsh8_ew.png\"></figure><p>Select <strong>New Stage</strong> for the deployment stage.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/941/1*yam3r0W_m2o-GF7xES19og.png\"></figure><p>Provide a name for our new stage. Description for both stage and deployment is optional. Then click <em>Deploy</em>.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/949/1*p7syCThRReflPGgndOYafw.png\"></figure><p>Our API is deployed and ready to use now. The invoke URL for our new stage is generated and we can use this URL to make a call to our API.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*oc54kTh8Rymki0m8IPXQhA.png\"></figure><p>Now that API is ready, we have to modify our lambda function so that it can take the data from query parameters that are sent along with the API request and then add it to the DynamoDB table.</p>\n<h3>Step 7: Modify the lambda function to accept the data sent through the API request from API Gateway.</h3>\n<p>The JSON request from the API Gateway will be in a specific format.</p>\n<p>So, let’s create a new test event. Click on the inverted triangle button next to Test and select ‘Click new test event’ to create a new event.</p>\n<p>In the Event Template, start typing apigateway and select ‘Amazon API Gateway AWS Proxy’ from the list which updates the JSON event below that.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*KLHsB4Qp2ahTxiPnPsUI_Q.png\"></figure><p>Provide a name for our new test case.</p>\n<p>The JSON event represents a sample request from API Gateway. The data sent through the URL can be accessed from the \"queryStringParameters\" property. There we have to specify our book details to mimic the functionality for testing our function to take data from query parameters.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*fIPuPHCwGPob5a9Ux7ehmg.png\"></figure><p>Edit the query string parameters with our data as shown below.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*vgKYB7bKSQRccS3PuYiMhw.png\"></figure><p>While creating the table, we mentioned the type of ‘id’ (partition key) as a <em>Number. </em>But the data received from a URL will be a <em>string</em>. So, we have to change the id attribute to Number(int) type before adding it to the table.</p>\n<p>Let’s modify the code to convert the ‘id’ attribute to a Number and send only the queryStringParameters to the table.</p>\n<pre>event['queryStringParameters']['id'] = int(event['queryStringParameters']['id'])</pre>\n<pre>bookTable.put_item(Item=event['queryStringParameters'])</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/852/1*-UV0bZvzse7vclOqxNaS7A.png\"></figure><p>Click on the Test button to test our modified code.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*7I8DNwACxNGvYJqN9EXh2g.png\"></figure><p>We get success response! Now let us try making a request from the API gateway.</p>\n<p>Go to our API in the API Gateway service. Select the POST method and Click ‘Test’.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Qc9csGzQmYgetm35iZo7PQ.png\"></figure><p>Enter the query strings with new data. And Click Test. Query Strings should be given in the following format.</p>\n<pre>key1=value1<strong>&amp;</strong>key2=value2<strong>&amp;</strong>key3=value3</pre>\n<pre>eg, <br>id=4<strong>&amp;</strong>title=Becoming<strong>&amp;</strong>author=MichelleObama</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*zam0vZbXdD3QsB4nFnT7FA.png\"></figure><p>We get success response! Our API is working perfectly.</p>\n<p>In this way, we can create a REST API using Amazon API Gateway with different methods and can also customise the properties based on our needs.</p>\n<p>Now I can now try giving a POST request to the API from Postman software. (Note: I have allowed ‘all access’ to my API for testing only)</p>\n<h3>Test the API</h3>\n<p>Send a POST request to the invoke URL with the query parameters.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*e-o7SXrjGj9owBoTTCAYrA.png\"></figure><p>We received success response.</p>\n<p>Follow for more! Happy Learning!</p>\n<p>If you liked this article, you can support me by <a href=\"https://www.buymeacoffee.com/sharmilas\">buying me a coffee</a>. I’d appreciate support in any way!</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Nh1owl6a3HdaRB_Y0y04pw.png\"></figure><img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=d8a35c379810\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://medium.com/featurepreneur/lambda-api-gateway-dynamodb-d8a35c379810\">Lambda — API Gateway —  DynamoDB</a> was originally published in <a href=\"https://medium.com/featurepreneur\">featurepreneur</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "enclosure": {},
            "categories": [
                "aws",
                "serverless",
                "lambda",
                "api-gateway",
                "dynamodb"
            ]
        },
        {
            "title": "Glassmorphism effect in CSS3",
            "pubDate": "2021-08-17 16:50:54",
            "link": "https://medium.com/featurepreneur/glassmorphism-effect-in-css3-988d7e8e92da?source=rss-5da727287624------2",
            "guid": "https://medium.com/p/988d7e8e92da",
            "author": "Sharmila S",
            "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*IubuZmzjNeliwPikmEtLvQ.gif",
            "description": "\n<p>In this article, we will be learning to add glassmorphic effect in our webpage using CSS3.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*IubuZmzjNeliwPikmEtLvQ.gif\"></figure><blockquote>The Glassmorphic effect looks pleasing to the eyes and adds a charming look to your website. It looks translucent and appears like frosted glass.</blockquote>\n<h4>Let's create a glassmorphic profile card</h4>\n<p>The Glassmorphism effect can be accomplished by applying the CSS property backdrop-filter: blur() along with few other styles to make it look more appealing.</p>\n<p>If you wish to play around with glassmorphism effect, there are tools to help you like the one below.</p>\n<p><a href=\"https://glassmorphism.com/\">Glassmorphism - simple CSS generator</a></p>\n<p>Glassmorphic effects can be better visualized with a colourful background. So, I’ve used an image as a background.</p>\n<blockquote>Link to the image I used — <a href=\"https://unsplash.com/photos/E8Ufcyxz514\">picture</a> by <a href=\"https://unsplash.com/@fakurian?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Fakurian</a>\n</blockquote>\n<p>Our HTML file looks like this.</p>\n<a href=\"https://medium.com/media/df485c71ea940c9c6ba724e35e1ea970/href\">https://medium.com/media/df485c71ea940c9c6ba724e35e1ea970/href</a><p>Now, the elegant part — adding styles!</p>\n<a href=\"https://medium.com/media/0818180992aa0440a9f9f890b8bb56cf/href\">https://medium.com/media/0818180992aa0440a9f9f890b8bb56cf/href</a><p>Let’s look into the class ‘glassmorphic’ which was added to the profile card.</p>\n<pre>.glassmorphic {   <br><br>    /* Translucent color for background with shadow */  <br>    background: rgba( 255, 255, 255, 0.15 );<br>    box-shadow: 0 8px 32px 0 rgba( 31, 38, 135, 0.37 ); </pre>\n<pre>    /* Add blur effect to background*/<br>    backdrop-filter: blur( 4.0px );<br>    -webkit-backdrop-filter: blur( 4.0px );</pre>\n<pre>    /* Rounded corners */<br>    border-radius: 10px;    </pre>\n<pre>    /* Thin and light border */<br>    border: 1px solid rgba( 255, 255, 255, 0.18 ); <br>}</pre>\n<p>The output:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*i4hLyJVAvDjpThQF1rylgg.png\"><figcaption>Glassmorphic card</figcaption></figure><p>Github Repository 👇</p>\n<p><a href=\"https://github.com/SharmilaS22/medium-glassmorphic-effect\">GitHub - SharmilaS22/medium-glassmorphic-effect: The code for the article on Glassmorphism effect using CSS3</a></p>\n<p>Happy Learning!! Follow for more!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=988d7e8e92da\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://medium.com/featurepreneur/glassmorphism-effect-in-css3-988d7e8e92da\">Glassmorphism effect in CSS3</a> was originally published in <a href=\"https://medium.com/featurepreneur\">featurepreneur</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "content": "\n<p>In this article, we will be learning to add glassmorphic effect in our webpage using CSS3.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*IubuZmzjNeliwPikmEtLvQ.gif\"></figure><blockquote>The Glassmorphic effect looks pleasing to the eyes and adds a charming look to your website. It looks translucent and appears like frosted glass.</blockquote>\n<h4>Let's create a glassmorphic profile card</h4>\n<p>The Glassmorphism effect can be accomplished by applying the CSS property backdrop-filter: blur() along with few other styles to make it look more appealing.</p>\n<p>If you wish to play around with glassmorphism effect, there are tools to help you like the one below.</p>\n<p><a href=\"https://glassmorphism.com/\">Glassmorphism - simple CSS generator</a></p>\n<p>Glassmorphic effects can be better visualized with a colourful background. So, I’ve used an image as a background.</p>\n<blockquote>Link to the image I used — <a href=\"https://unsplash.com/photos/E8Ufcyxz514\">picture</a> by <a href=\"https://unsplash.com/@fakurian?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Fakurian</a>\n</blockquote>\n<p>Our HTML file looks like this.</p>\n<a href=\"https://medium.com/media/df485c71ea940c9c6ba724e35e1ea970/href\">https://medium.com/media/df485c71ea940c9c6ba724e35e1ea970/href</a><p>Now, the elegant part — adding styles!</p>\n<a href=\"https://medium.com/media/0818180992aa0440a9f9f890b8bb56cf/href\">https://medium.com/media/0818180992aa0440a9f9f890b8bb56cf/href</a><p>Let’s look into the class ‘glassmorphic’ which was added to the profile card.</p>\n<pre>.glassmorphic {   <br><br>    /* Translucent color for background with shadow */  <br>    background: rgba( 255, 255, 255, 0.15 );<br>    box-shadow: 0 8px 32px 0 rgba( 31, 38, 135, 0.37 ); </pre>\n<pre>    /* Add blur effect to background*/<br>    backdrop-filter: blur( 4.0px );<br>    -webkit-backdrop-filter: blur( 4.0px );</pre>\n<pre>    /* Rounded corners */<br>    border-radius: 10px;    </pre>\n<pre>    /* Thin and light border */<br>    border: 1px solid rgba( 255, 255, 255, 0.18 ); <br>}</pre>\n<p>The output:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*i4hLyJVAvDjpThQF1rylgg.png\"><figcaption>Glassmorphic card</figcaption></figure><p>Github Repository 👇</p>\n<p><a href=\"https://github.com/SharmilaS22/medium-glassmorphic-effect\">GitHub - SharmilaS22/medium-glassmorphic-effect: The code for the article on Glassmorphism effect using CSS3</a></p>\n<p>Happy Learning!! Follow for more!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=988d7e8e92da\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://medium.com/featurepreneur/glassmorphism-effect-in-css3-988d7e8e92da\">Glassmorphism effect in CSS3</a> was originally published in <a href=\"https://medium.com/featurepreneur\">featurepreneur</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
            "enclosure": {},
            "categories": [
                "glassmorphism",
                "stylesheets",
                "css",
                "css3",
                "glass"
            ]
        }
    ]
}